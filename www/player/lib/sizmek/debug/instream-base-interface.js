// Generated by CoffeeScript 1.12.7
var baseInterface, baseinterface, core,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

baseinterface = this.baseinterface || {};

baseinterface.controller = this.baseinterface.controller || {};

baseinterface.event = this.baseinterface.event || {};

baseinterface.model = this.baseinterface.model || {};

baseinterface.view = this.baseinterface.view || {};

core = this.core || {};

core.common = this.core.common || {};

core.event = this.core.event || {};

core.model = this.core.model || {};

core.event.EventDispatcher = (function() {
  function EventDispatcher(listeners) {
    this.listeners = listeners != null ? listeners : [];
    this.dispatchEvent = bind(this.dispatchEvent, this);
    this.removeEventListener = bind(this.removeEventListener, this);
    this.addEventListener = bind(this.addEventListener, this);
    this.on = this.addEventListener;
    this.off = this.removeEventListener;
    this.emit = this.dispatchEvent;
  }

  EventDispatcher.prototype.addEventListener = function(type, callback) {
    var listener;
    listener = {
      type: type,
      callback: callback
    };
    return this.listeners.push(listener);
  };

  EventDispatcher.prototype.removeEventListener = function(type, callback) {
    var i, j, listener, ref, results1;
    results1 = [];
    for (i = j = ref = this.listeners.length - 1; ref <= 0 ? j < 0 : j > 0; i = ref <= 0 ? ++j : --j) {
      listener = this.listeners[i];
      if (listener.type === type && listener.callback === callback) {
        results1.push(this.listeners.splice(i, 1));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  EventDispatcher.prototype.dispatchEvent = function(type, data) {
    var event, j, len, listener, ref, results1;
    if (data == null) {
      data = null;
    }
    event = {
      target: this,
      type: type,
      data: data
    };
    ref = this.listeners;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      listener = ref[j];
      if (listener.type === type) {
        results1.push(listener.callback(event));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  return EventDispatcher;

})();

core.event.Event = (function() {
  function Event() {}

  Event.MODEL_CHANGED = "modelChanged";

  Event.READY = "ready";

  Event.RESIZE = "resize";

  return Event;

})();

core.common.Utils = (function() {
  function Utils() {}

  Utils.setCookie = function(name, value) {
    return document.cookie = name + "=" + value;
  };

  Utils.getCookie = function(name) {
    var end, start, val;
    if (document.cookie.indexOf(name + "=") === -1) {
      return void 0;
    }
    start = void 0;
    end = void 0;
    if (document.cookie.length > 0) {
      start = document.cookie.indexOf(name + "=");
    }
    if (start !== -1) {
      start = start + name.length + 1;
      end = document.cookie.indexOf(";", start);
      if (end === -1) {
        end = document.cookie.length;
      }
      val = unescape(document.cookie.substring(start, end));
      if (val === "true") {
        val = true;
      }
      if (val === "false") {
        val = false;
      }
      if (val === "undefined") {
        val = void 0;
      }
      if (val === "undefined") {
        val = null;
      }
      return val;
    }
    return void 0;
  };

  Utils.clearCookie = function(key) {
    return document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
  };

  Utils.clearCookies = function() {
    var cookie, cookies, j, key, len, pos, results1;
    cookies = document.cookie.split(";");
    results1 = [];
    for (j = 0, len = cookies.length; j < len; j++) {
      cookie = cookies[j];
      pos = cookie.indexOf("=");
      key = pos > -1 ? cookie.substr(0, pos) : cookie;
      results1.push(document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT");
    }
    return results1;
  };

  Utils.getQuery = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    return (results == null ? void 0 : decodeURIComponent(results[1].replace(/\+/g, " ")));
  };

  Utils.searchify = function(obj) {
    var a, key, value;
    a = [];
    for (key in obj) {
      key = encodeURIComponent(key);
      value = encodeURIComponent(obj[key]);
      a.push(key + "=" + value);
    }
    return a.join("&");
  };

  Utils.on = function(obj, type, fn) {
    if (obj.addEventListener) {
      return obj.addEventListener(type, fn, false);
    } else if (obj.attachEvent) {
      obj["e" + type + fn] = fn;
      return obj[type + fn] = function() {
        return obj["e" + type + fn](window.event);
      };
    }
  };

  Utils.off = function(obj, type, fn) {
    if (obj.removeEventListener) {
      return obj.removeEventListener(type, fn, false);
    } else if (obj.detachEvent) {
      obj.detachEvent("on" + type, obj[type + fn]);
      obj[type + fn] = null;
      return obj["e" + type + fn] = null;
    }
  };

  Utils.domLoaded = function() {
    return document.readyState === "complete" || document.readyState === "interactive";
  };

  Utils.request = function(url, callback) {
    var req;
    req = new XMLHttpRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200 && req.status !== 304) {
        return typeof callback === "function" ? callback({
          error: true
        }) : void 0;
      } else {
        return typeof callback === "function" ? callback({
          data: req.responseText
        }) : void 0;
      }
    };
    return req.send();
  };

  Utils["typeof"] = function(obj) {
    var str;
    if (obj == null) {
      return false;
    }
    str = obj.constructor.toString();
    str = str.split("()")[0];
    str = str.replace("function ", "");
    str = str.trim();
    if (str.length > 0) {
      return str;
    } else {
      return false;
    }
  };

  Utils.loadScript = function(url, callback) {
    var head, script;
    script = document.createElement("script");
    script.src = url;
    script.onload = callback;
    head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
    return script;
  };

  Utils.getPosition = function(el) {
    var x, y;
    x = 0;
    y = 0;
    while (el) {
      x += el.offsetLeft - el.scrollLeft + el.clientLeft;
      y += el.offsetTop - el.scrollTop + el.clientTop;
      el = el.offsetParent;
    }
    return {
      x: x,
      y: y
    };
  };

  Utils.isMobile = function() {
    var exp, matches;
    exp = /(Android)|(iPhone)|(webOS)|(iPad)|(iPod)|(BlackBerry)|(Windows Phone)/i;
    matches = navigator.userAgent.match(exp);
    return Boolean(matches);
  };

  Utils.getScreenSize = function() {
    var ratio;
    ratio = window.devicePixelRatio > 1 ? window.devicePixelRatio : 1;
    return {
      width: screen.width / ratio({
        height: screen.height / ratio
      })
    };
  };

  return Utils;

})();

core.model.Model = (function(superClass) {
  var Event, Utils;

  extend(Model, superClass);

  Utils = core.common.Utils;

  Event = core.event.Event;

  Model.prototype.data = {};

  function Model() {
    this._checkCookies = bind(this._checkCookies, this);
    this._checkQueries = bind(this._checkQueries, this);
    this.pullData = bind(this.pullData, this);
    this.getData = bind(this.getData, this);
    this.setData = bind(this.setData, this);
    Model.__super__.constructor.call(this);
    this.pullData();
  }

  Model.prototype.setData = function(key, value) {
    this.data[key] = value;
    return this.dispatchEvent(Event.MODEL_CHANGED, {
      key: key,
      value: value
    });
  };

  Model.prototype.getData = function(key) {
    if (key === void 0) {
      return this.data;
    } else {
      return this.data[key];
    }
  };

  Model.prototype.pullData = function() {};

  Model.prototype._checkQueries = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getQuery(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  Model.prototype._checkCookies = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getCookie(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  return Model;

})(core.event.EventDispatcher);

baseinterface.model.ConfigModel = (function(superClass) {
  extend(ConfigModel, superClass);

  ConfigModel.prototype.data = {
    "preroll": "",
    "midroll": "",
    "postroll": "",
    "overlay": "",
    "player-type": "html5",
    "width": 640,
    "height": 360,
    "auto-start": false,
    "script-access": "always",
    "wmode": "opaque",
    "scaling": "enabled"
  };

  function ConfigModel() {
    this.pullData = bind(this.pullData, this);
    ConfigModel.__super__.constructor.call(this);
  }

  ConfigModel.prototype.pullData = function() {
    return this._checkQueries();
  };

  return ConfigModel;

})(core.model.Model);

baseinterface.model.AdTagModel = (function(superClass) {
  var Event;

  extend(AdTagModel, superClass);

  Event = core.event.Event;

  AdTagModel.prototype.data = null;

  function AdTagModel() {
    this.getData = bind(this.getData, this);
    this.setData = bind(this.setData, this);
    AdTagModel.__super__.constructor.call(this);
  }

  AdTagModel.prototype.setData = function(tag) {
    this.data = {
      tag: tag
    };
    return this.dispatchEvent(Event.MODEL_CHANGED);
  };

  AdTagModel.prototype.getData = function() {
    return this.data;
  };

  return AdTagModel;

})(core.event.EventDispatcher);

baseinterface.model.ReportingModel = (function(superClass) {
  extend(ReportingModel, superClass);

  ReportingModel.prototype.data = {
    "impression": 0,
    "creativeView": 0,
    "start": 0,
    "firstQuartile": 0,
    "midpoint": 0,
    "thirdQuartile": 0,
    "complete": 0,
    "progress": 0,
    "mute": 0,
    "unmute": 0,
    "pause": 0,
    "resume": 0,
    "skip": 0,
    "close": 0,
    "fullscreen": 0,
    "clickTracking": 0,
    "interaction": 0,
    "expand": 0,
    "collapse": 0,
    "acceptInvitation": 0,
    "error": 0,
    "exitFullscreen": 0,
    "skipStateChange": 0,
    "stopStateChange": 0,
    "adDurationChange": 0,
    "getVolume": -1,
    "adDuration": -1,
    "adRemainingTime": -1,
    "adSizeChange": 0,
    "adWidth": 0,
    "adHeight": 0,
    "adIcons": 0
  };

  function ReportingModel() {
    ReportingModel.__super__.constructor.call(this);
  }

  return ReportingModel;

})(core.model.Model);

baseinterface.view.CompanionAdView = (function() {
  var Utils;

  Utils = core.common.Utils;

  function CompanionAdView(data1) {
    this.data = data1;
    this._getTracking = bind(this._getTracking, this);
    this._getHTMLResource = bind(this._getHTMLResource, this);
    this._getIFrameResource = bind(this._getIFrameResource, this);
    this._getScriptResource = bind(this._getScriptResource, this);
    this._getImageResource = bind(this._getImageResource, this);
    this._getFlashResource = bind(this._getFlashResource, this);
    this._getStaticResource = bind(this._getStaticResource, this);
    this._getAdResource = bind(this._getAdResource, this);
    this.id = this.data._id;
    this.width = this.data._width;
    this.height = this.data._height;
    this.resource = this._getAdResource();
    this.tracking = this._getTracking();
  }

  CompanionAdView.prototype._getAdResource = function() {
    if (this.data.StaticResource) {
      return this._getStaticResource();
    }
    if (this.data.ScriptResource) {
      return this._getScriptResource();
    }
    if (this.data.IFrameResource) {
      return this._getIFrameResource();
    }
    if (this.data.HTMLResource) {
      return this._getHTMLResource();
    }
  };

  CompanionAdView.prototype._getStaticResource = function() {
    var flash;
    flash = this.data.StaticResource._creativeType === "application/x-shockwave-flash";
    if (flash) {
      return this._getFlashResource();
    } else {
      return this._getImageResource();
    }
  };

  CompanionAdView.prototype._getFlashResource = function() {
    var key, object, param, params;
    object = document.createElement("object");
    object.id = "companion-" + this.data._id;
    object.type = "application/x-shockwave-flash";
    object.style = "visibility: visible;";
    object.data = this.data.StaticResource.__cdata;
    object.width = this.data._width;
    object.height = this.data._height;
    params = {
      "allowScriptAccess": "always",
      "allowFullscreen": "true",
      "wmode": "opaque",
      "bgcolor": "#000000",
      "flashvars": ""
    };
    for (key in params) {
      param = document.createElement("param");
      param.name = key;
      param.value = params[key];
      object.appendChild(param);
    }
    return object;
  };

  CompanionAdView.prototype._getImageResource = function() {
    var a, img;
    if (this.data.CompanionClickThrough) {
      a = document.createElement("a");
      a.id = "companion-" + this.data._id;
      a.href = this.data.CompanionClickThrough.__cdata;
      a.target = "_blank";
      img = document.createElement("img");
      img.src = this.data.StaticResource.__cdata;
      a.appendChild(img);
      return a;
    }
    img = document.createElement("img");
    img.id = "companion-" + this.data._id;
    img.src = this.data.StaticResource.__cdata;
    return img;
  };

  CompanionAdView.prototype._getScriptResource = function() {};

  CompanionAdView.prototype._getIFrameResource = function() {};

  CompanionAdView.prototype._getHTMLResource = function() {
    var node, noscript, script, source;
    node = document.createElement("span");
    node.innerHTML = this.data.HTMLResource.__cdata;
    node.id = "companion-" + this.data._id;
    script = node.getElementsByTagName("script")[0];
    if (!script) {
      return node;
    }
    source = script.src;
    script = document.createElement("script");
    script.src = source;
    noscript = node.getElementsByTagName("noscript")[0];
    node.appendChild(script);
    if (noscript) {
      node.appendChild(noscript);
    }
    return node;
  };

  CompanionAdView.prototype._getTracking = function() {
    var j, len, node, nodes, tracking;
    tracking = [];
    nodes = this.data.TrackingEvents != null ? this.data.TrackingEvents.Tracking : void 0;
    if (!nodes) {
      return tracking;
    }
    if (Utils["typeof"](nodes) === "Object") {
      nodes = [nodes];
    }
    for (j = 0, len = nodes.length; j < len; j++) {
      node = nodes[j];
      tracking.push(node.__cdata);
    }
    return tracking;
  };

  return CompanionAdView;

})();

baseinterface.model.CompanionModel = (function(superClass) {
  var CompanionAdView, Event, Utils;

  extend(CompanionModel, superClass);

  CompanionAdView = baseinterface.view.CompanionAdView;

  Event = core.event.Event;

  Utils = core.common.Utils;

  CompanionModel.prototype.data = null;

  function CompanionModel() {
    this._getCompanionAds = bind(this._getCompanionAds, this);
    this.getData = bind(this.getData, this);
    this.setData = bind(this.setData, this);
    CompanionModel.__super__.constructor.call(this);
    this.xmlParser = new X2JS();
  }

  CompanionModel.prototype.setData = function(raw) {
    this.data = {};
    this.data.xml = {};
    this.data.xml.raw = raw;
    this.data.xml.parsed = this.xmlParser.xml_str2json(raw);
    this.data.ads = this._getCompanionAds(this.data.xml.parsed.CompanionAds.Companion);
    return this.dispatchEvent(Event.MODEL_CHANGED);
  };

  CompanionModel.prototype.getData = function() {
    return this.data;
  };

  CompanionModel.prototype._getCompanionAds = function(obj) {
    var ads, item, j, len;
    if (Utils["typeof"](obj) === "Array") {
      ads = [];
      for (j = 0, len = obj.length; j < len; j++) {
        item = obj[j];
        ads.push(new CompanionAdView(item));
      }
      return ads;
    }
    if (Utils["typeof"](obj) === "Object") {
      return [new CompanionAdView(obj)];
    }
    return [];
  };

  return CompanionModel;

})(core.event.EventDispatcher);

baseinterface.model.ModelCollection = (function() {
  var AdTagModel, CompanionModel, ConfigModel, ReportingModel;

  CompanionModel = baseinterface.model.CompanionModel;

  ReportingModel = baseinterface.model.ReportingModel;

  AdTagModel = baseinterface.model.AdTagModel;

  ConfigModel = baseinterface.model.ConfigModel;

  function ModelCollection() {
    this.configModel = new ConfigModel();
    this.adTagModel = new AdTagModel();
    this.reportingModel = new ReportingModel();
    this.companionModel = new CompanionModel();
  }

  return ModelCollection;

})();

baseinterface.event.Event = (function() {
  function Event() {}

  Event.AD_TAG_CHANGED = "adTagChanged";

  Event.AD_REPORT_CHANGED = "adReportChanged";

  Event.AD_COMPANION_CHANGED = "adCompanionChanged";

  return Event;

})();

baseinterface.view.Html5PlayerView = (function(superClass) {
  var Event;

  extend(Html5PlayerView, superClass);

  Event = baseinterface.event.Event;

  Html5PlayerView.prototype.ad = null;

  Html5PlayerView.prototype.sources = ["../assets/videos/Sizmek.mp4", "../assets/videos/Sizmek.webm", "../assets/videos/Sizmek.mov", "../assets/videos/Bunny.3gp", "../assets/videos/Bunny.ogv"];

  function Html5PlayerView() {
    this._onCompanion = bind(this._onCompanion, this);
    this._onFinish = bind(this._onFinish, this);
    this._onTrack = bind(this._onTrack, this);
    this._onAdData = bind(this._onAdData, this);
    this._parseData = bind(this._parseData, this);
    this._onScriptLoaded = bind(this._onScriptLoaded, this);
    this._loadScript = bind(this._loadScript, this);
    this._createControlsNode = bind(this._createControlsNode, this);
    this._createSources = bind(this._createSources, this);
    this._createVideoNode = bind(this._createVideoNode, this);
    this.render = bind(this.render, this);
    Html5PlayerView.__super__.constructor.call(this);
  }

  Html5PlayerView.prototype.render = function(data1) {
    this.data = data1;
    this.config = this._parseData();
    this._createVideoNode();
    this._createSources();
    this._createControlsNode();
    return this._loadScript();
  };

  Html5PlayerView.prototype._createVideoNode = function() {
    this.videoNode = document.createElement("video");
    this.videoNode.id = "player";
    this.videoNode.width = this.config.width;
    this.videoNode.height = this.config.height;
    this.videoNode.setAttribute("controls", "");
    this.videoNode.setAttribute("poster", "../assets/images/Sizmek.jpg");
    return document.body.appendChild(this.videoNode);
  };

  Html5PlayerView.prototype._createSources = function() {
    var j, len, node, ref, results1, source;
    ref = this.sources;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      source = ref[j];
      node = document.createElement("source");
      node.src = source;
      results1.push(this.videoNode.appendChild(node));
    }
    return results1;
  };

  Html5PlayerView.prototype._createControlsNode = function() {
    this.controlsNode = document.createElement("div");
    return this.controlsNode.id = "player_control";
  };

  Html5PlayerView.prototype._loadScript = function() {
    var head;
    this.script = document.createElement("script");
    this.script.src = "../lib/maik/instreamapi-2.1.2.min.js";
    this.script.onload = this._onScriptLoaded;
    head = document.getElementsByTagName("head")[0];
    return head.appendChild(this.script);
  };

  Html5PlayerView.prototype._onScriptLoaded = function() {
    this.ad = $ad("player", this.config);
    return this.ad.onAdLoadCompleteCallback(this._onAdData);
  };

  Html5PlayerView.prototype._parseData = function() {
    return {
      width: this.data["width"],
      height: this.data["height"],
      preroll: this.data["preroll"],
      midroll: this.data["midroll"],
      postroll: this.data["postroll"],
      overlay: this.data["overlay"],
      overlayDelay: 2,
      overlayDuration: 30,
      minDurationForMidrolls: 20,
      adCountdownText: "Your ad remains [time]",
      adCountdownPosition: "top",
      onCompanion: this._onCompanion,
      onFinish: this._onFinish,
      onTrack: this._onTrack,
      vpaidSingleVideoSlotMode: false
    };
  };

  Html5PlayerView.prototype._onAdData = function(event) {
    var tag;
    tag = event.info.asString;
    return this.dispatchEvent(Event.AD_TAG_CHANGED, {
      tag: tag
    });
  };

  Html5PlayerView.prototype._onTrack = function(adEvent, adType) {
    return this.dispatchEvent(Event.AD_REPORT_CHANGED, {
      type: adEvent
    });
  };

  Html5PlayerView.prototype._onFinish = function() {};

  Html5PlayerView.prototype._onCompanion = function(companionObject, companionString) {
    return this.dispatchEvent(Event.AD_COMPANION_CHANGED, {
      raw: companionString
    });
  };

  return Html5PlayerView;

})(core.event.EventDispatcher);

baseinterface.view.As3PlayerView = (function(superClass) {
  var Event, conversions;

  extend(As3PlayerView, superClass);

  Event = baseinterface.event.Event;

  conversions = {
    "trackImpression": "impression",
    "trackCreativeView": "creativeView",
    "trackStartOfVideo": "start",
    "trackFirstQuartileOfVideo": "firstQuartile",
    "trackMidOfVideo": "midpoint",
    "trackThirdQuartileOfVideo": "thirdQuartile",
    "trackEndOfVideo": "complete",
    "trackError": "error",
    "trackMute": "mute",
    "trackUnMute": "unmute",
    "trackClose": "close",
    "trackSkip": "skip",
    "trackPause": "pause",
    "trackResume": "resume",
    "trackClickthru": "clickTracking",
    "trackExpand": "expand",
    "trackContract": "collapse",
    "trackEnterFullscreen": "fullscreen",
    "trackExitFullscreen": "exitFullscreen",
    "trackInteraction": "interaction",
    "trackAcceptInvitation": "acceptInvitation",
    "trackProgressCalled": "progress"
  };

  function As3PlayerView() {
    this._onCompanion = bind(this._onCompanion, this);
    this._onTrack = bind(this._onTrack, this);
    this._onAdData = bind(this._onAdData, this);
    As3PlayerView.__super__.constructor.call(this);
    window.writeRawAdData = this._onAdData;
    window.onCompanion = this._onCompanion;
    window.onTrack = this._onTrack;
  }

  As3PlayerView.prototype.render = function(data1) {
    var over, params, rand, start, url, vars;
    this.data = data1;
    rand = "rnd=" + (Math.floor(Math.random() * 100000000));
    url = "../lib/eyewonder/player-as3.swf?" + rand;
    over = this.data["controls"] !== "below" ? "enabled" : "disabled";
    start = this.data["auto-start"] ? "enabled" : "disabled";
    vars = {
      "PREROLL_URL": escape(this.data["preroll"]),
      "MIDROLL_URL": escape(this.data["midroll"]),
      "POSTROLL_URL": escape(this.data["postroll"]),
      "OVERLAY_URL": escape(this.data["overlay"]),
      "SCALE": this.data["scaling"],
      "ALLOWSCRIPTACCESS": this.data["script-access"],
      "OVERLAYCB": over,
      "AUTOSTART": start,
      "ADMODE": "progressive",
      "VIDEO_FILE": "../../assets/videos/Sizmek.mp4",
      "UIF_PLUGIN": "../lib/uif/uif-4.2.5.swf?" + rand,
      "CONFIG_URL": "../lib/uif/config.xml",
      "LOCALCONNECTIONNAME": ""
    };
    params = {
      "allowScriptAccess": this.data["script-access"],
      "wmode": this.data["wmode"],
      "allowFullscreen": "true",
      "bgcolor": "#000000"
    };
    return swfobject.embedSWF(url, "player-container", "100%", "100%", "9.0.0", "", vars, params);
  };

  As3PlayerView.prototype._onAdData = function(type, tag) {
    return this.dispatchEvent(Event.AD_TAG_CHANGED, {
      tag: tag
    });
  };

  As3PlayerView.prototype._onTrack = function(event) {
    var type;
    type = conversions[event.info.type];
    if (type != null) {
      return this.dispatchEvent(Event.AD_REPORT_CHANGED, {
        type: type
      });
    }
  };

  As3PlayerView.prototype._onCompanion = function(companionString) {
    return this.dispatchEvent(Event.AD_COMPANION_CHANGED, {
      raw: companionString
    });
  };

  return As3PlayerView;

})(core.event.EventDispatcher);

baseinterface.view.SizmekPlayerView = (function(superClass) {
  var Event, Utils;

  extend(SizmekPlayerView, superClass);

  Utils = core.common.Utils;

  Event = baseinterface.event.Event;

  SizmekPlayerView.prototype.loaded = 0;

  SizmekPlayerView.prototype.scriptUrl = "../lib/sizmek/debug/instream-html5-player.js";

  SizmekPlayerView.prototype.adManUrl = "../lib/sizmek/debug/instream-ad-manager.js";

  SizmekPlayerView.prototype.parentId = "player-container";

  SizmekPlayerView.prototype.config = {
    ads: [],
    parent: null,
    video: {
      auto: false,
      poster: "../assets/images/Sizmek.jpg",
      width: 640,
      height: 360,
      sources: ["../assets/videos/Sizmek.mp4", "../assets/videos/Sizmek.webm", "../assets/videos/Sizmek.mov", "../assets/videos/Bunny.3gp", "../assets/videos/Bunny.ogv"]
    },
    controls: {
      skinUrl: "../assets/images/controls-skin.png",
      height: 40,
      backgroundColor: "rgba(0, 0, 0, 0.8)",
      buttons: {
        width: 35,
        color: "white"
      },
      videoSeek: {
        fillColor: "#0068ff",
        backgroundColor: "#444444",
        bufferColor: "#777777",
        barHeight: 5,
        thumbHeight: 15
      },
      soundSeek: {
        fillColor: "#0068ff",
        backgroundColor: "#777777"
      }
    }
  };

  function SizmekPlayerView() {
    this._validate = bind(this._validate, this);
    this._onAdReported = bind(this._onAdReported, this);
    this._onAdStarted = bind(this._onAdStarted, this);
    this._parseData = bind(this._parseData, this);
    this._onScriptLoaded = bind(this._onScriptLoaded, this);
    this.render = bind(this.render, this);
    SizmekPlayerView.__super__.constructor.call(this);
  }

  SizmekPlayerView.prototype.render = function(data1) {
    this.data = data1;
    this._parseData();
    Utils.loadScript(this.scriptUrl, this._onScriptLoaded);
    return Utils.loadScript(this.adManUrl, this._onScriptLoaded);
  };

  SizmekPlayerView.prototype._onScriptLoaded = function() {
    if (++this.loaded !== 2) {
      return;
    }
    this.player = new SizmekHtml5Player(this.config);
    this.player.on("adStarted", this._onAdStarted);
    return this.player.on("adReported", this._onAdReported);
  };

  SizmekPlayerView.prototype._parseData = function() {
    var midroll, overlay, postroll, preroll;
    preroll = {
      url: this.data.preroll,
      offset: "start"
    };
    midroll = {
      url: this.data.midroll,
      offset: 4
    };
    postroll = {
      url: this.data.postroll,
      offset: "end"
    };
    overlay = {
      url: this.data.overlay,
      offset: 8,
      duration: 30
    };
    if (this._validate(preroll)) {
      this.config.ads.push(preroll);
    }
    if (this._validate(midroll)) {
      this.config.ads.push(midroll);
    }
    if (this._validate(postroll)) {
      this.config.ads.push(postroll);
    }
    if (this._validate(overlay)) {
      this.config.ads.push(overlay);
    }
    this.config.noSize = !this.data.width || !this.data.height ? true : void 0;
    this.config.video.width = this.data.width ? Number(this.data.width) : 640;
    this.config.video.height = this.data.height ? Number(this.data.height) : 360;
    this.config.video.auto = this.data["auto-start"];
    return this.config.parent = document.getElementById(this.parentId);
  };

  SizmekPlayerView.prototype._onAdStarted = function(event) {
    var companion, tag;
    companion = event.data.ad.companion;
    tag = event.data.ad.data;
    this.dispatchEvent(Event.AD_TAG_CHANGED, {
      tag: tag
    });
    if (companion != null) {
      return this.dispatchEvent(Event.AD_COMPANION_CHANGED, {
        raw: companion
      });
    }
  };

  SizmekPlayerView.prototype._onAdReported = function(event) {
    return this.dispatchEvent(Event.AD_REPORT_CHANGED, event.data);
  };

  SizmekPlayerView.prototype._validate = function(ad) {
    if (Utils["typeof"](ad.url) !== "String") {
      return false;
    }
    if (!(ad.url.length > 0)) {
      return false;
    }
    return true;
  };

  return SizmekPlayerView;

})(core.event.EventDispatcher);

baseinterface.view.JwPlayerView = (function(superClass) {
  extend(JwPlayerView, superClass);

  JwPlayerView.prototype.key = "Zn953OvGRr/OMG+vjJaruad5b4EqY9UU1uwdrA==";

  function JwPlayerView() {
    this._parseData = bind(this._parseData, this);
    this._onScriptLoaded = bind(this._onScriptLoaded, this);
    this._loadScript = bind(this._loadScript, this);
    this.render = bind(this.render, this);
    JwPlayerView.__super__.constructor.call(this);
  }

  JwPlayerView.prototype.render = function(data1) {
    this.data = data1;
    this.config = this._parseData();
    return this._loadScript();
  };

  JwPlayerView.prototype._loadScript = function() {
    var head;
    this.script = document.createElement("script");
    this.script.src = "../lib/jwplayer/jwplayer.js";
    this.script.onload = this._onScriptLoaded;
    head = document.getElementsByTagName("head")[0];
    return head.appendChild(this.script);
  };

  JwPlayerView.prototype._onScriptLoaded = function() {
    jwplayer.key = this.key;
    return jwplayer("player-container").setup(this.config);
  };

  JwPlayerView.prototype._parseData = function() {
    return {
      file: "../../assets/videos/Sizmek.mp4",
      image: "../assets/images/Sizmek.jpg",
      width: this.data.width,
      height: this.data.height,
      schedule: {
        adbreak1: {
          offset: 'pre',
          tag: this.data.preroll
        },
        adbreak2: {
          offset: 2,
          tag: this.data.midroll
        },
        adbreak3: {
          offset: 4,
          tag: this.data.overlay
        },
        adbreak4: {
          offset: 'post',
          tag: this.data.postroll
        }
      }
    };
  };

  return JwPlayerView;

})(core.event.EventDispatcher);

baseinterface.view.ViewCollection = (function() {
  var As3PlayerView, Html5PlayerView, JwPlayerView, SizmekPlayerView;

  JwPlayerView = baseinterface.view.JwPlayerView;

  SizmekPlayerView = baseinterface.view.SizmekPlayerView;

  As3PlayerView = baseinterface.view.As3PlayerView;

  Html5PlayerView = baseinterface.view.Html5PlayerView;

  function ViewCollection() {
    this.html5PlayerView = new Html5PlayerView();
    this.as3PlayerView = new As3PlayerView();
    this.sizmekPlayerView = new SizmekPlayerView();
    this.jwPlayerView = new JwPlayerView();
  }

  return ViewCollection;

})();

baseinterface.controller.PlayerController = (function() {
  var Event;

  Event = baseinterface.event.Event;

  function PlayerController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    this._getView = bind(this._getView, this);
    this._onAdCompanionChanged = bind(this._onAdCompanionChanged, this);
    this._onAdReportChanged = bind(this._onAdReportChanged, this);
    this._onAdTagChanged = bind(this._onAdTagChanged, this);
    data = this.models.configModel.getData();
    this.view = this._getView(data["player-type"]);
    this.view.addEventListener(Event.AD_TAG_CHANGED, this._onAdTagChanged);
    this.view.addEventListener(Event.AD_REPORT_CHANGED, this._onAdReportChanged);
    this.view.addEventListener(Event.AD_COMPANION_CHANGED, this._onAdCompanionChanged);
    this.view.render(data);
  }

  PlayerController.prototype._onAdTagChanged = function(event) {
    var tag;
    tag = event.data.tag;
    return this.models.adTagModel.setData(tag);
  };

  PlayerController.prototype._onAdReportChanged = function(event) {
    var type, value;
    type = event.data.type;
    value = event.data.value !== void 0 ? event.data.value : this.models.reportingModel.getData(type) + 1;
    return this.models.reportingModel.setData(type, value);
  };

  PlayerController.prototype._onAdCompanionChanged = function(event) {
    var raw;
    raw = event.data.raw;
    return this.models.companionModel.setData(raw);
  };

  PlayerController.prototype._getView = function(type) {
    switch (type) {
      case "html5":
        return this.views.sizmekPlayerView;
      case "as3":
        return this.views.as3PlayerView;
      case "maik":
        return this.views.html5PlayerView;
      case "jw":
        return this.views.jwPlayerView;
      default:
        return this.views.html5PlayerView;
    }
  };

  return PlayerController;

})();

baseinterface.BaseInterface = (function() {
  var ModelCollection, PlayerController, Utils, ViewCollection;

  Utils = core.common.Utils;

  PlayerController = baseinterface.controller.PlayerController;

  ViewCollection = baseinterface.view.ViewCollection;

  ModelCollection = baseinterface.model.ModelCollection;

  function BaseInterface() {
    this._onWindowLoaded = bind(this._onWindowLoaded, this);
    Utils.on(window, "load", this._onWindowLoaded);
  }

  BaseInterface.prototype._onWindowLoaded = function() {
    this.models = new ModelCollection();
    this.views = new ViewCollection();
    return this.controller = new PlayerController(this.models, this.views);
  };

  return BaseInterface;

})();

baseInterface = new baseinterface.BaseInterface();
