// Generated by CoffeeScript 1.12.7
var core, player,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

core = this.core || {};

core.common = this.core.common || {};

core.event = this.core.event || {};

core.model = this.core.model || {};

player = this.player || {};

player.controller = this.player.controller || {};

player.event = this.player.event || {};

player.model = this.player.model || {};

player.view = this.player.view || {};

player.view.controls = this.player.view.controls || {};

core.event.EventDispatcher = (function() {
  function EventDispatcher(listeners) {
    this.listeners = listeners != null ? listeners : [];
    this.dispatchEvent = bind(this.dispatchEvent, this);
    this.removeEventListener = bind(this.removeEventListener, this);
    this.addEventListener = bind(this.addEventListener, this);
    this.on = this.addEventListener;
    this.off = this.removeEventListener;
    this.emit = this.dispatchEvent;
  }

  EventDispatcher.prototype.addEventListener = function(type, callback) {
    var listener;
    listener = {
      type: type,
      callback: callback
    };
    return this.listeners.push(listener);
  };

  EventDispatcher.prototype.removeEventListener = function(type, callback) {
    var i, j, listener, ref, results1;
    results1 = [];
    for (i = j = ref = this.listeners.length - 1; ref <= 0 ? j < 0 : j > 0; i = ref <= 0 ? ++j : --j) {
      listener = this.listeners[i];
      if (listener.type === type && listener.callback === callback) {
        results1.push(this.listeners.splice(i, 1));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  EventDispatcher.prototype.dispatchEvent = function(type, data) {
    var event, j, len, listener, ref, results1;
    if (data == null) {
      data = null;
    }
    event = {
      target: this,
      type: type,
      data: data
    };
    ref = this.listeners;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      listener = ref[j];
      if (listener.type === type) {
        results1.push(listener.callback(event));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  return EventDispatcher;

})();

core.event.Event = (function() {
  function Event() {}

  Event.MODEL_CHANGED = "modelChanged";

  Event.READY = "ready";

  Event.RESIZE = "resize";

  return Event;

})();

core.common.Utils = (function() {
  function Utils() {}

  Utils.setCookie = function(name, value) {
    return document.cookie = name + "=" + value;
  };

  Utils.getCookie = function(name) {
    var end, start, val;
    if (document.cookie.indexOf(name + "=") === -1) {
      return void 0;
    }
    start = void 0;
    end = void 0;
    if (document.cookie.length > 0) {
      start = document.cookie.indexOf(name + "=");
    }
    if (start !== -1) {
      start = start + name.length + 1;
      end = document.cookie.indexOf(";", start);
      if (end === -1) {
        end = document.cookie.length;
      }
      val = unescape(document.cookie.substring(start, end));
      if (val === "true") {
        val = true;
      }
      if (val === "false") {
        val = false;
      }
      if (val === "undefined") {
        val = void 0;
      }
      if (val === "undefined") {
        val = null;
      }
      return val;
    }
    return void 0;
  };

  Utils.clearCookie = function(key) {
    return document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
  };

  Utils.clearCookies = function() {
    var cookie, cookies, j, key, len, pos, results1;
    cookies = document.cookie.split(";");
    results1 = [];
    for (j = 0, len = cookies.length; j < len; j++) {
      cookie = cookies[j];
      pos = cookie.indexOf("=");
      key = pos > -1 ? cookie.substr(0, pos) : cookie;
      results1.push(document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT");
    }
    return results1;
  };

  Utils.getQuery = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    return (results == null ? void 0 : decodeURIComponent(results[1].replace(/\+/g, " ")));
  };

  Utils.searchify = function(obj) {
    var a, key, value;
    a = [];
    for (key in obj) {
      key = encodeURIComponent(key);
      value = encodeURIComponent(obj[key]);
      a.push(key + "=" + value);
    }
    return a.join("&");
  };

  Utils.on = function(obj, type, fn) {
    if (obj.addEventListener) {
      return obj.addEventListener(type, fn, false);
    } else if (obj.attachEvent) {
      obj["e" + type + fn] = fn;
      return obj[type + fn] = function() {
        return obj["e" + type + fn](window.event);
      };
    }
  };

  Utils.off = function(obj, type, fn) {
    if (obj.removeEventListener) {
      return obj.removeEventListener(type, fn, false);
    } else if (obj.detachEvent) {
      obj.detachEvent("on" + type, obj[type + fn]);
      obj[type + fn] = null;
      return obj["e" + type + fn] = null;
    }
  };

  Utils.domLoaded = function() {
    return document.readyState === "complete" || document.readyState === "interactive";
  };

  Utils.request = function(url, callback) {
    var req;
    req = new XMLHttpRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200 && req.status !== 304) {
        return typeof callback === "function" ? callback({
          error: true
        }) : void 0;
      } else {
        return typeof callback === "function" ? callback({
          data: req.responseText
        }) : void 0;
      }
    };
    return req.send();
  };

  Utils["typeof"] = function(obj) {
    var str;
    if (obj == null) {
      return false;
    }
    str = obj.constructor.toString();
    str = str.split("()")[0];
    str = str.replace("function ", "");
    str = str.trim();
    if (str.length > 0) {
      return str;
    } else {
      return false;
    }
  };

  Utils.loadScript = function(url, callback) {
    var head, script;
    script = document.createElement("script");
    script.src = url;
    script.onload = callback;
    head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
    return script;
  };

  Utils.getPosition = function(el) {
    var x, y;
    x = 0;
    y = 0;
    while (el) {
      x += el.offsetLeft - el.scrollLeft + el.clientLeft;
      y += el.offsetTop - el.scrollTop + el.clientTop;
      el = el.offsetParent;
    }
    return {
      x: x,
      y: y
    };
  };

  Utils.isMobile = function() {
    var exp, matches;
    exp = /(Android)|(iPhone)|(webOS)|(iPad)|(iPod)|(BlackBerry)|(Windows Phone)/i;
    matches = navigator.userAgent.match(exp);
    return Boolean(matches);
  };

  Utils.getScreenSize = function() {
    var ratio;
    ratio = window.devicePixelRatio > 1 ? window.devicePixelRatio : 1;
    return {
      width: screen.width / ratio({
        height: screen.height / ratio
      })
    };
  };

  return Utils;

})();

core.model.Model = (function(superClass) {
  var Event, Utils;

  extend(Model, superClass);

  Utils = core.common.Utils;

  Event = core.event.Event;

  Model.prototype.data = {};

  function Model() {
    this._checkCookies = bind(this._checkCookies, this);
    this._checkQueries = bind(this._checkQueries, this);
    this.pullData = bind(this.pullData, this);
    this.getData = bind(this.getData, this);
    this.setData = bind(this.setData, this);
    Model.__super__.constructor.call(this);
    this.pullData();
  }

  Model.prototype.setData = function(key, value) {
    this.data[key] = value;
    return this.dispatchEvent(Event.MODEL_CHANGED, {
      key: key,
      value: value
    });
  };

  Model.prototype.getData = function(key) {
    if (key === void 0) {
      return this.data;
    } else {
      return this.data[key];
    }
  };

  Model.prototype.pullData = function() {};

  Model.prototype._checkQueries = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getQuery(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  Model.prototype._checkCookies = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getCookie(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  return Model;

})(core.event.EventDispatcher);

player.model.PlayerConfigModel = (function(superClass) {
  var Event, Utils;

  extend(PlayerConfigModel, superClass);

  Utils = core.common.Utils;

  Event = core.event.Event;

  PlayerConfigModel.prototype.data = {
    parent: null,
    video: {
      width: 640,
      height: 360,
      sources: ["video.mp4"],
      poster: "poster.png",
      auto: false
    },
    controls: {
      skinUrl: "controls-skin.png",
      height: 40,
      backgroundColor: "#1A1A1A",
      buttons: {
        width: 35,
        color: "white"
      },
      videoSeek: {
        fillColor: "#0068ff",
        backgroundColor: "#444444",
        bufferColor: "#777777",
        barHeight: 5,
        thumbHeight: 15
      },
      soundSeek: {
        fillColor: "#0068ff",
        backgroundColor: "#777777",
        barHeight: 4,
        barWidth: 75,
        thumbHeight: 13
      }
    }
  };

  function PlayerConfigModel(config1) {
    this.config = config1;
    this._validateSoundSeek = bind(this._validateSoundSeek, this);
    this._validateVideoSeek = bind(this._validateVideoSeek, this);
    this._validateButtons = bind(this._validateButtons, this);
    this._validateControls = bind(this._validateControls, this);
    this._validateVideo = bind(this._validateVideo, this);
    this._validateParent = bind(this._validateParent, this);
    this.pullData = bind(this.pullData, this);
    this.resize = bind(this.resize, this);
    PlayerConfigModel.__super__.constructor.call(this);
  }

  PlayerConfigModel.prototype.resize = function(width, height) {
    this.data.video.width = width;
    this.data.video.height = height;
    return this.dispatchEvent(Event.RESIZE, {
      width: width,
      height: height
    });
  };

  PlayerConfigModel.prototype.pullData = function() {
    this._validateParent();
    this._validateVideo();
    this._validateControls();
    return this.emit(Event.MODEL_CHANGED);
  };

  PlayerConfigModel.prototype._validateParent = function() {
    this.data.parent = document.body;
    if (this.config.parent) {
      return this.data.parent = this.config.parent;
    }
  };

  PlayerConfigModel.prototype._validateVideo = function() {
    var c, d;
    if (!this.config.video) {
      return;
    }
    d = this.data.video;
    c = this.config.video;
    if (!isNaN(parseInt(c.width))) {
      d.width = c.width;
    }
    if (!isNaN(parseInt(c.height))) {
      d.height = c.height;
    }
    if (Utils["typeof"](c.sources) === "Array") {
      d.sources = c.sources;
    }
    if (Utils["typeof"](c.poster) === "String") {
      d.poster = c.poster;
    }
    if (Utils["typeof"](c.auto) === "Boolean") {
      return d.auto = c.auto;
    }
  };

  PlayerConfigModel.prototype._validateControls = function() {
    var c, d;
    if (!this.config.controls) {
      return;
    }
    d = this.data.controls;
    c = this.config.controls;
    if (Utils["typeof"](c.skinUrl) === "String") {
      d.skinUrl = c.skinUrl;
    }
    if (Utils["typeof"](c.height) === "Number") {
      d.height = c.height;
    }
    if (Utils["typeof"](c.backgroundColor) === "String") {
      d.backgroundColor = c.backgroundColor;
    }
    this._validateButtons();
    this._validateVideoSeek();
    return this._validateSoundSeek();
  };

  PlayerConfigModel.prototype._validateButtons = function() {
    var c, d;
    if (!this.config.controls.buttons) {
      return;
    }
    d = this.data.controls.buttons;
    c = this.config.controls.buttons;
    if (Utils["typeof"](c.width) === "Number") {
      d.width = c.width;
    }
    if (Utils["typeof"](c.color) === "String") {
      return d.color = c.color;
    }
  };

  PlayerConfigModel.prototype._validateVideoSeek = function() {
    var c, d;
    if (!this.config.controls.videoSeek) {
      return;
    }
    d = this.data.controls.videoSeek;
    c = this.config.controls.videoSeek;
    if (Utils["typeof"](c.fillColor) === "String") {
      d.fillColor = c.fillColor;
    }
    if (Utils["typeof"](c.backgroundColor) === "String") {
      d.backgroundColor = c.backgroundColor;
    }
    if (Utils["typeof"](c.bufferColor) === "String") {
      d.bufferColor = c.bufferColor;
    }
    if (Utils["typeof"](c.barHeight) === "Number") {
      d.barHeight = c.barHeight;
    }
    if (Utils["typeof"](c.thumbHeight) === "Number") {
      return d.thumbHeight = c.thumbHeight;
    }
  };

  PlayerConfigModel.prototype._validateSoundSeek = function() {
    var c, d;
    if (!this.config.controls.soundSeek) {
      return;
    }
    d = this.data.controls.soundSeek;
    c = this.config.controls.soundSeek;
    if (Utils["typeof"](c.fillColor) === "String") {
      d.fillColor = c.fillColor;
    }
    if (Utils["typeof"](c.backgroundColor) === "String") {
      return d.backgroundColor = c.backgroundColor;
    }
  };

  return PlayerConfigModel;

})(core.model.Model);

player.model.AdConfigModel = (function(superClass) {
  extend(AdConfigModel, superClass);

  AdConfigModel.prototype.data = null;

  function AdConfigModel(config1) {
    this.config = config1;
    this.pullData = bind(this.pullData, this);
    AdConfigModel.__super__.constructor.call(this);
  }

  AdConfigModel.prototype.pullData = function() {
    return this.data = this.config.ads;
  };

  return AdConfigModel;

})(core.model.Model);

player.model.ModelCollection = (function() {
  var AdConfigModel, PlayerConfigModel;

  AdConfigModel = player.model.AdConfigModel;

  PlayerConfigModel = player.model.PlayerConfigModel;

  function ModelCollection(config1) {
    this.config = config1;
    this.playerConfigModel = new PlayerConfigModel(this.config);
    this.adConfigModel = new AdConfigModel(this.config);
  }

  return ModelCollection;

})();

player.view.View = (function(superClass) {
  extend(View, superClass);

  function View() {
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.render = bind(this.render, this);
    View.__super__.constructor.call(this);
    this.node = document.createElement("div");
  }

  View.prototype.render = function() {};

  View.prototype.show = function() {
    return this.node.style.visibility = "visible";
  };

  View.prototype.hide = function() {
    return this.node.style.visibility = "hidden";
  };

  return View;

})(core.event.EventDispatcher);

player.event.VideoEvent = (function() {
  function VideoEvent() {}

  VideoEvent.PLAYED = "played";

  VideoEvent.PAUSED = "paused";

  VideoEvent.VOLUME_CHANGED = "volumeChanged";

  VideoEvent.TIME_CHANGED = "timeChanged";

  VideoEvent.BUFFER_CHANGED = "bufferChanged";

  VideoEvent.METADATA_LOADED = "metadataLoaded";

  VideoEvent.MOUSE_OVER = "mouseover";

  VideoEvent.ENTER_FULL_SCREEN = "enterFullScreen";

  VideoEvent.EXIT_FULL_SCREEN = "exitFullScreen";

  return VideoEvent;

})();

player.view.VideoView = (function(superClass) {
  var Utils, VideoEvent;

  extend(VideoView, superClass);

  VideoEvent = player.event.VideoEvent;

  Utils = core.common.Utils;

  VideoView.prototype.isFullScreen = false;

  VideoView.prototype.lastVolume = 1;

  function VideoView() {
    this._getFSCommand = bind(this._getFSCommand, this);
    this._onFullScreenChange = bind(this._onFullScreenChange, this);
    this._onVideoEvent = bind(this._onVideoEvent, this);
    this._setSources = bind(this._setSources, this);
    this._addListeners = bind(this._addListeners, this);
    this._setInitialState = bind(this._setInitialState, this);
    this.disableControls = bind(this.disableControls, this);
    this.enableControls = bind(this.enableControls, this);
    this.requestFullScreen = bind(this.requestFullScreen, this);
    this.setVolume = bind(this.setVolume, this);
    this.setTime = bind(this.setTime, this);
    this.unmute = bind(this.unmute, this);
    this.mute = bind(this.mute, this);
    this.pause = bind(this.pause, this);
    this.play = bind(this.play, this);
    this.resize = bind(this.resize, this);
    this.render = bind(this.render, this);
    var IOS10C, IOS10Safari, playsinline;
    VideoView.__super__.constructor.call(this);
    this.video = document.createElement("video");
    this.video.id = "video-player";
    this.video.style.display = "block";
    this.isMobile = Utils.isMobile();
    this.node.appendChild(this.video);
    setTimeout(this._setInitialState, 1);
    playsinline = false;
    IOS10Safari = navigator.userAgent.match(/(iPhone|iPad|Ipad).*Version\/(\d*)/);
    if (IOS10Safari && IOS10Safari.length === 3) {
      if (IOS10Safari[2] > 9) {
        this.video.setAttribute('playsinline', '');
        playsinline = true;
      }
    }
    IOS10C = navigator.userAgent.match(/(iPhone|iPad|Ipad).*([1-3]\d).*(CriOS)\/(\d*)/);
    if (IOS10C && IOS10C.length > 3) {
      if (IOS10C[2] > 9 && IOS10C[4] > 53) {
        this.video.setAttribute('playsinline', '');
        playsinline = true;
      }
    }
    if (!playsinline) {
      this.video.setAttribute("webkit-playsinline", "");
    }
  }

  VideoView.prototype.render = function(data1) {
    this.data = data1;
    this.video.width = this.data.video.width;
    this.video.height = this.data.video.height;
    this.video.poster = this.data.video.poster;
    if (this.data.video.auto) {
      this.video.setAttribute("autoplay", "");
    }
    this.data.parent.appendChild(this.node);
    this._addListeners();
    this._getFSCommand();
    this._setSources(this.data.video.sources);
    return this.enableControls();
  };

  VideoView.prototype.resize = function(width, height) {
    this.video.style.width = width + "px";
    this.video.style.height = height + "px";
    this.video.width = width;
    return this.video.height = height;
  };

  VideoView.prototype.play = function() {
    return this.video.play();
  };

  VideoView.prototype.pause = function() {
    return this.video.pause();
  };

  VideoView.prototype.mute = function() {
    return this.setVolume(0);
  };

  VideoView.prototype.unmute = function() {
    if (this.lastVolume < 0.1) {
      this.lastVolume = 0.5;
    }
    return this.setVolume(this.lastVolume);
  };

  VideoView.prototype.setTime = function(time, percent) {
    if (Utils["typeof"](percent) === "Number") {
      time = this.video.duration * percent;
    }
    return this.video.currentTime = time;
  };

  VideoView.prototype.setVolume = function(volume) {
    this.lastVolume = this.video.volume;
    volume = Number(volume);
    if (volume == null) {
      volume = 1;
    }
    if (volume.toString() === "NaN") {
      volume = 1;
    }
    if (volume < 0) {
      volume = 0;
    }
    if (volume > 1) {
      volume = 1;
    }
    this.video.muted = volume === 0;
    this.video.volume = volume;
    return Utils.setCookie("video_volume", volume);
  };

  VideoView.prototype.requestFullScreen = function() {
    return this.video.requestFullScreen();
  };

  VideoView.prototype.enableControls = function() {
    if (!(this.isMobile || this.isFullScreen)) {
      return;
    }
    return this.video.setAttribute("controls", "");
  };

  VideoView.prototype.disableControls = function() {
    return this.video.removeAttribute("controls");
  };

  VideoView.prototype._setInitialState = function() {
    var IOS10C, IOS10Safari, autoplay, chrome53, volume;
    volume = Number(Utils.getCookie("video_volume"));
    chrome53 = navigator.userAgent.match(/Android.*Chrome\/(\d*)/);
    IOS10Safari = navigator.userAgent.match(/(iPhone|iPad|Ipad).*Version\/(\d*)/);
    IOS10C = navigator.userAgent.match(/(iPhone|iPad|Ipad).*([1-3]\d).*(CriOS)\/(\d*)/);
    autoplay = this.data.video.auto ? true : false;
    if (autoplay && ((chrome53 && chrome53.length === 2 && chrome53[1] > 52) || (IOS10Safari && IOS10Safari.length === 3 && IOS10Safari[2] > 9) || (IOS10C && IOS10C.length > 3 && IOS10C[2] > 9 && IOS10C[4] > 53))) {
      volume = 0;
    }
    if (volume.toString() === "NaN") {
      volume = this.video.volume;
    }
    return this.setVolume(volume - 0.01);
  };

  VideoView.prototype._addListeners = function() {
    Utils.on(this.video, "loadedmetadata", this._onVideoEvent);
    Utils.on(this.video, "volumechange", this._onVideoEvent);
    Utils.on(this.video, "timeupdate", this._onVideoEvent);
    Utils.on(this.video, "play", this._onVideoEvent);
    Utils.on(this.video, "pause", this._onVideoEvent);
    Utils.on(this.video, "progress", this._onVideoEvent);
    Utils.on(this.video, "mouseover", this._onVideoEvent);
    Utils.on(document, "webkitfullscreenchange", this._onFullScreenChange);
    Utils.on(document, "mozfullscreenchange", this._onFullScreenChange);
    Utils.on(document, "fullscreenchange", this._onFullScreenChange);
    return Utils.on(document, "MSFullscreenChange", this._onFullScreenChange);
  };

  VideoView.prototype._setSources = function(sources) {
    var j, len, node, results1, source;
    this.video.innerHTML = "";
    results1 = [];
    for (j = 0, len = sources.length; j < len; j++) {
      source = sources[j];
      node = document.createElement("source");
      node.src = source;
      results1.push(this.video.appendChild(node));
    }
    return results1;
  };

  VideoView.prototype._onVideoEvent = function(event) {
    var data, percent, type, volume;
    type = null;
    data = null;
    switch (event.type) {
      case "mouseover":
        type = VideoEvent.MOUSE_OVER;
        break;
      case "loadedmetadata":
        type = VideoEvent.METADATA_LOADED;
        break;
      case "volumechange":
        type = VideoEvent.VOLUME_CHANGED;
        volume = this.video.muted ? 0 : this.video.volume;
        data = {
          volume: volume
        };
        break;
      case "timeupdate":
        type = VideoEvent.TIME_CHANGED;
        data = {
          time: this.video.currentTime,
          duration: this.video.duration
        };
        break;
      case "play":
        type = VideoEvent.PLAYED;
        break;
      case "pause":
        type = VideoEvent.PAUSED;
        break;
      case "progress":
        type = VideoEvent.BUFFER_CHANGED;
        percent = null;
        if (this.video.buffered && this.video.buffered.length > 0 && this.video.buffered.end && this.video.duration) {
          percent = this.video.buffered.end(0) / this.video.duration;
        }
        data = {
          percent: percent || 0
        };
    }
    if (Utils["typeof"](type) !== "String") {
      return;
    }
    return this.emit(type, data);
  };

  VideoView.prototype._onFullScreenChange = function() {
    this.isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;
    if (this.isFullScreen) {
      this.enableControls();
      return this.emit(VideoEvent.ENTER_FULL_SCREEN);
    } else {
      if (!this.isMobile) {
        this.disableControls();
      }
      return this.emit(VideoEvent.EXIT_FULL_SCREEN);
    }
  };

  VideoView.prototype._getFSCommand = function() {
    return this.video.requestFullScreen = this.video.requestFullscreen || this.video.msRequestFullscreen || this.video.mozRequestFullScreen || this.video.webkitRequestFullscreen || function() {};
  };

  return VideoView;

})(player.view.View);

player.view.AdView = (function(superClass) {
  extend(AdView, superClass);

  function AdView() {
    this._css = bind(this._css, this);
    this.resize = bind(this.resize, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.render = bind(this.render, this);
    AdView.__super__.constructor.call(this);
    this.node.id = "ad-view";
  }

  AdView.prototype.render = function(data1) {
    this.data = data1;
    this.data.parent.appendChild(this.node);
    return this.node.style.cssText = this._css();
  };

  AdView.prototype.show = function() {
    return this.node.style.display = "block";
  };

  AdView.prototype.hide = function() {
    return this.node.style.display = "none";
  };

  AdView.prototype.resize = function(width, height) {
    this.node.style.width = width + "px";
    return this.node.style.height = height + "px";
  };

  AdView.prototype._css = function() {
    return "top: 0; display: none; position: absolute; width: " + this.data.video.width + "px; height: " + this.data.video.height + "px;";
  };

  return AdView;

})(player.view.View);

player.event.ControlsEvent = (function() {
  function ControlsEvent() {}

  ControlsEvent.SKIN_LOADED = "skinLoaded";

  ControlsEvent.FULL_SCREENED = "fullScreened";

  ControlsEvent.PLAYED = "playred";

  ControlsEvent.PAUSED = "paused";

  ControlsEvent.MUTED = "muted";

  ControlsEvent.UNMUTED = "unmuted";

  ControlsEvent.SOUND_SEEKED = "soundSeeked";

  ControlsEvent.VIDEO_SEEK_STARTED = "videoSeekStarted";

  ControlsEvent.VIDEO_SEEK_ENDED = "videoSeekEnded";

  return ControlsEvent;

})();

player.view.controls.Skin = (function(superClass) {
  var ControlsEvent;

  extend(Skin, superClass);

  ControlsEvent = player.event.ControlsEvent;

  function Skin(view) {
    this.view = view;
    this._changeColor = bind(this._changeColor, this);
    this._getColor = bind(this._getColor, this);
    this._onImgLoaded = bind(this._onImgLoaded, this);
    this.render = bind(this.render, this);
    Skin.__super__.constructor.call(this);
    this.node = document.createElement("canvas");
    this.ctx = this.node.getContext("2d");
    this.img = new Image();
    this.img.width = 0;
    this.img.height = 0;
    this.img.onload = this._onImgLoaded;
  }

  Skin.prototype.render = function(data1) {
    this.data = data1;
    this.color = this._getColor();
    this.img.crossOrigin = "anonymous";
    this.img.src = this.data.controls.skinUrl;
    return this.view.node.appendChild(this.img);
  };

  Skin.prototype._onImgLoaded = function() {
    this.view.node.removeChild(this.img);
    this.node.width = this.img.naturalWidth;
    this.node.height = this.img.naturalHeight;
    this.ctx.drawImage(this.img, 0, 0, this.node.width, this.node.height);
    this._changeColor();
    return this.emit(ControlsEvent.SKIN_LOADED);
  };

  Skin.prototype._getColor = function() {
    var pix;
    this.ctx.rect(0, 0, 1, 1);
    this.ctx.fillStyle = this.data.controls.buttons.color;
    this.ctx.fill();
    pix = this.ctx.getImageData(0, 0, 1, 1).data;
    this.node.width = this.node.width;
    return {
      r: pix[0],
      g: pix[1],
      b: pix[2]
    };
  };

  Skin.prototype._changeColor = function() {
    var data, i, j, pix, ref;
    pix = this.ctx.getImageData(0, 0, this.node.width, this.node.height);
    data = pix.data;
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      data[i] = this.color.r;
      data[i + 1] = this.color.g;
      data[i + 2] = this.color.b;
    }
    return this.ctx.putImageData(pix, 0, 0);
  };

  return Skin;

})(core.event.EventDispatcher);

player.view.controls.VideoSeek = (function() {
  var ControlsEvent, Utils;

  ControlsEvent = player.event.ControlsEvent;

  Utils = core.common.Utils;

  function VideoSeek(view) {
    this.view = view;
    this._thumbCss = bind(this._thumbCss, this);
    this._fillCss = bind(this._fillCss, this);
    this._bufferCss = bind(this._bufferCss, this);
    this._css = bind(this._css, this);
    this.setBuffer = bind(this.setBuffer, this);
    this._onMouseUp = bind(this._onMouseUp, this);
    this._onMouseMove = bind(this._onMouseMove, this);
    this._onMouseDown = bind(this._onMouseDown, this);
    this.setTime = bind(this.setTime, this);
    this.render = bind(this.render, this);
    this.node = document.createElement("div");
    this.buffer = document.createElement("div");
    this.fill = document.createElement("div");
    this.thumb = document.createElement("div");
    this.view.node.appendChild(this.node);
    this.node.appendChild(this.buffer);
    this.node.appendChild(this.fill);
    this.node.appendChild(this.thumb);
  }

  VideoSeek.prototype.render = function(data1) {
    this.data = data1;
    this.style = this.data.controls.videoSeek;
    this.node.style.cssText = this._css();
    this.buffer.style.cssText = this._bufferCss();
    this.fill.style.cssText = this._fillCss();
    this.thumb.style.cssText = this._thumbCss();
    this.thumb.onmousedown = this._onMouseDown;
    this.buffer.onmousedown = this._onMouseDown;
    return this.fill.onmousedown = this._onMouseDown;
  };

  VideoSeek.prototype.setTime = function(time, duration) {
    var left, percent, width;
    percent = time / duration;
    left = (this.node.offsetWidth - this.thumb.offsetWidth) * percent;
    width = (this.node.offsetWidth - this.thumb.offsetWidth * 0.5) * percent;
    this.thumb.style.marginLeft = left + "px";
    return this.fill.style.width = width + "px";
  };

  VideoSeek.prototype._onMouseDown = function(event) {
    Utils.on(document, "mousemove", this._onMouseMove);
    Utils.on(document, "mouseup", this._onMouseUp);
    setTimeout((function(_this) {
      return function() {
        return _this._onMouseMove(event, 1);
      };
    })(this));
    return this.view.emit(ControlsEvent.VIDEO_SEEK_STARTED);
  };

  VideoSeek.prototype._onMouseMove = function(event) {
    var left, max, mouseX, offsetX, width, x;
    mouseX = event.clientX || event.pageX;
    offsetX = Utils.getPosition(this.node).x;
    x = mouseX - offsetX;
    max = this.node.offsetWidth - this.thumb.offsetWidth;
    left = x - this.thumb.offsetWidth * 0.5;
    if (left < 0) {
      left = 0;
    }
    if (left > max) {
      left = max;
    }
    width = left + this.thumb.offsetWidth * 0.5;
    if (width > this.buffer.offsetWidth) {
      return;
    }
    this.thumb.style.marginLeft = left + "px";
    return this.fill.style.width = width + "px";
  };

  VideoSeek.prototype._onMouseUp = function(event) {
    var percent;
    Utils.off(document, "mousemove", this._onMouseMove);
    Utils.off(document, "mouseup", this._onMouseUp);
    percent = this.thumb.offsetLeft / (this.node.offsetWidth - this.thumb.offsetWidth);
    return this.view.emit(ControlsEvent.VIDEO_SEEK_ENDED, {
      percent: percent
    });
  };

  VideoSeek.prototype.setBuffer = function(percent) {
    var width;
    width = this.node.offsetWidth * percent;
    return this.buffer.style.width = width + "px";
  };

  VideoSeek.prototype._css = function() {
    return "height: " + this.style.barHeight + "px; background-color: " + this.style.backgroundColor + ";";
  };

  VideoSeek.prototype._bufferCss = function() {
    return "width: 0px; height: " + this.style.barHeight + "px; background-color: " + this.style.bufferColor + ";";
  };

  VideoSeek.prototype._fillCss = function() {
    return "width: 0px; height: " + this.style.barHeight + "px; margin-top: " + (-this.style.barHeight) + "px; background-color: " + this.style.fillColor + ";";
  };

  VideoSeek.prototype._thumbCss = function() {
    return "position:absolute; cursor: pointer; -webkit-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75); -moz-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75); box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75); margin-top: " + (-this.style.barHeight + this.style.barHeight * 0.5 - this.style.thumbHeight * 0.5) + "px; height: " + this.style.thumbHeight + "px; width: " + this.style.thumbHeight + "px; border-radius: " + this.style.thumbHeight + "px; background-color: " + this.data.controls.buttons.color + ";";
  };

  return VideoSeek;

})();

player.view.controls.SoundSeek = (function() {
  var ControlsEvent, Utils;

  ControlsEvent = player.event.ControlsEvent;

  Utils = core.common.Utils;

  function SoundSeek(view) {
    this.view = view;
    this._thumbCss = bind(this._thumbCss, this);
    this._fillCss = bind(this._fillCss, this);
    this._barCss = bind(this._barCss, this);
    this._css = bind(this._css, this);
    this._onMouseUp = bind(this._onMouseUp, this);
    this._onMouseMove = bind(this._onMouseMove, this);
    this._onMouseDown = bind(this._onMouseDown, this);
    this.setVolume = bind(this.setVolume, this);
    this.render = bind(this.render, this);
    this.node = document.createElement("div");
    this.bar = document.createElement("div");
    this.fill = document.createElement("div");
    this.thumb = document.createElement("div");
    this.view.node.appendChild(this.node);
    this.node.appendChild(this.bar);
    this.bar.appendChild(this.fill);
    this.node.appendChild(this.thumb);
  }

  SoundSeek.prototype.render = function(data1) {
    this.data = data1;
    this.node.style.cssText = this._css();
    this.bar.style.cssText = this._barCss();
    this.fill.style.cssText = this._fillCss();
    this.thumb.style.cssText = this._thumbCss();
    this.thumb.onmousedown = this._onMouseDown;
    this.bar.onmousedown = this._onMouseDown;
    return this.fill.onmousedown = this._onMouseDown;
  };

  SoundSeek.prototype.setVolume = function(volume) {
    var left, width;
    left = (this.node.offsetWidth - this.thumb.offsetWidth) * volume;
    width = (this.node.offsetWidth - this.thumb.offsetWidth * 0.5) * volume;
    this.thumb.style.marginLeft = left + "px";
    return this.fill.style.width = width + "px";
  };

  SoundSeek.prototype._onMouseDown = function(event) {
    Utils.on(document, "mousemove", this._onMouseMove);
    Utils.on(document, "mouseup", this._onMouseUp);
    return this._onMouseMove(event);
  };

  SoundSeek.prototype._onMouseMove = function(event) {
    var mouseX, offsetX, volume, x;
    mouseX = event.clientX || event.pageX;
    offsetX = Utils.getPosition(this.node).x;
    x = mouseX - offsetX;
    volume = x / this.node.offsetWidth;
    if (volume < 0) {
      volume = 0;
    }
    if (volume > 1) {
      volume = 1;
    }
    return this.view.emit(ControlsEvent.SOUND_SEEKED, {
      volume: volume
    });
  };

  SoundSeek.prototype._onMouseUp = function(event) {
    Utils.off(document, "mousemove", this._onMouseMove);
    return Utils.off(document, "mouseup", this._onMouseUp);
  };

  SoundSeek.prototype._css = function() {
    return "display:inline-block; height: " + (this.data.controls.height - this.data.controls.videoSeek.barHeight) + "px;";
  };

  SoundSeek.prototype._barCss = function() {
    return "margin-top: " + ((this.data.controls.height - this.data.controls.videoSeek.barHeight) * 0.5 - 2) + "px; width: " + this.data.controls.soundSeek.barWidth + "px; height: " + this.data.controls.soundSeek.barHeight + "px; background-color: " + this.data.controls.soundSeek.backgroundColor + ";";
  };

  SoundSeek.prototype._fillCss = function() {
    return "height: 100%; width: 0px; background-color: " + this.data.controls.soundSeek.fillColor + ";";
  };

  SoundSeek.prototype._thumbCss = function() {
    var top;
    top = -this.data.controls.soundSeek.thumbHeight * 0.5 - this.data.controls.soundSeek.barHeight * 0.5;
    return "height: " + this.data.controls.soundSeek.thumbHeight + "px; width: " + this.data.controls.soundSeek.thumbHeight + "px; border-radius: " + this.data.controls.soundSeek.thumbHeight + "px; margin-top: " + top + "px; background-color: " + this.data.controls.buttons.color + "; cursor: pointer;";
  };

  return SoundSeek;

})();

player.view.controls.SkinButton = (function() {
  SkinButton.prototype.id = "";

  function SkinButton(view, position) {
    this.view = view;
    this.position = position;
    this._css = bind(this._css, this);
    this._baseCss = bind(this._baseCss, this);
    this._cssText = bind(this._cssText, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.render = bind(this.render, this);
    this.node = document.createElement("canvas");
    if (this.id) {
      this.node.id = this.id;
    }
    this.ctx = this.node.getContext("2d");
    this.hidden = false;
    this.view.node.appendChild(this.node);
  }

  SkinButton.prototype.render = function(data1, skin) {
    var offset;
    this.data = data1;
    this.skin = skin;
    this.node.width = this.skin.img.naturalWidth / 5;
    this.node.height = this.skin.img.naturalHeight;
    offset = -this.node.width * (this.position - 1);
    this.node.style.cssText = this._cssText();
    return this.ctx.drawImage(this.skin.node, offset, 0);
  };

  SkinButton.prototype.show = function() {
    this.hidden = false;
    return this.node.style.display = "inline-block";
  };

  SkinButton.prototype.hide = function() {
    this.hidden = true;
    return this.node.style.display = "none";
  };

  SkinButton.prototype._cssText = function() {
    return this._baseCss() + this._css();
  };

  SkinButton.prototype._baseCss = function() {
    var display;
    display = this.hidden ? "none" : "inline-block";
    return "display: " + display + "; width: " + this.data.controls.buttons.width + "px; height: " + (this.data.controls.height - this.data.controls.videoSeek.barHeight) + "px; cursor: pointer;";
  };

  SkinButton.prototype._css = function() {
    return "";
  };

  return SkinButton;

})();

player.view.controls.PlayButton = (function(superClass) {
  var ControlsEvent;

  extend(PlayButton, superClass);

  ControlsEvent = player.event.ControlsEvent;

  PlayButton.prototype.id = "play-btn";

  function PlayButton(view) {
    this.view = view;
    this._onClick = bind(this._onClick, this);
    PlayButton.__super__.constructor.call(this, this.view, 2);
    this.node.onclick = this._onClick;
  }

  PlayButton.prototype._onClick = function() {
    return this.view.emit(ControlsEvent.PLAYED);
  };

  return PlayButton;

})(player.view.controls.SkinButton);

player.view.controls.PauseButton = (function(superClass) {
  var ControlsEvent;

  extend(PauseButton, superClass);

  ControlsEvent = player.event.ControlsEvent;

  PauseButton.prototype.id = "pause-btn";

  function PauseButton(view) {
    this.view = view;
    this._css = bind(this._css, this);
    this._onClick = bind(this._onClick, this);
    PauseButton.__super__.constructor.call(this, this.view, 1);
    this.node.onclick = this._onClick;
  }

  PauseButton.prototype._onClick = function() {
    return this.view.emit(ControlsEvent.PAUSED);
  };

  PauseButton.prototype._css = function() {
    return "display:none;";
  };

  return PauseButton;

})(player.view.controls.SkinButton);

player.view.controls.SoundOnButton = (function(superClass) {
  var ControlsEvent;

  extend(SoundOnButton, superClass);

  ControlsEvent = player.event.ControlsEvent;

  SoundOnButton.prototype.id = "sound-on-btn";

  function SoundOnButton(view) {
    this.view = view;
    this._onClick = bind(this._onClick, this);
    SoundOnButton.__super__.constructor.call(this, this.view, 4);
    this.node.onclick = this._onClick;
  }

  SoundOnButton.prototype._onClick = function() {
    return this.view.emit(ControlsEvent.MUTED);
  };

  return SoundOnButton;

})(player.view.controls.SkinButton);

player.view.controls.SoundOffButton = (function(superClass) {
  var ControlsEvent;

  extend(SoundOffButton, superClass);

  ControlsEvent = player.event.ControlsEvent;

  SoundOffButton.prototype.id = "sound-off-btn";

  function SoundOffButton(view) {
    this.view = view;
    this._onClick = bind(this._onClick, this);
    SoundOffButton.__super__.constructor.call(this, this.view, 3);
    this.node.onclick = this._onClick;
  }

  SoundOffButton.prototype._onClick = function() {
    return this.view.emit(ControlsEvent.UNMUTED);
  };

  return SoundOffButton;

})(player.view.controls.SkinButton);

player.view.controls.FullScreenButton = (function(superClass) {
  var ControlsEvent;

  extend(FullScreenButton, superClass);

  ControlsEvent = player.event.ControlsEvent;

  FullScreenButton.prototype.id = "fullscreen-btn";

  function FullScreenButton(view) {
    this.view = view;
    this._css = bind(this._css, this);
    this._onClick = bind(this._onClick, this);
    FullScreenButton.__super__.constructor.call(this, this.view, 5);
    this.node.onclick = this._onClick;
  }

  FullScreenButton.prototype._onClick = function() {
    return this.view.emit(ControlsEvent.FULL_SCREENED);
  };

  FullScreenButton.prototype._css = function() {
    return "float:right;";
  };

  return FullScreenButton;

})(player.view.controls.SkinButton);

player.view.controls.TimeDisplay = (function() {
  function TimeDisplay(view) {
    this.view = view;
    this._pad = bind(this._pad, this);
    this._css = bind(this._css, this);
    this.setTime = bind(this.setTime, this);
    this.render = bind(this.render, this);
    this.node = document.createElement("span");
    this.view.node.appendChild(this.node);
  }

  TimeDisplay.prototype.render = function(data1) {
    this.data = data1;
    this.node.style.cssText = this._css();
    return this.setTime(0, 0);
  };

  TimeDisplay.prototype.setTime = function(time, duration) {
    var mins, secs;
    mins = parseInt(Math.floor(time / 60));
    secs = this._pad(time - mins * 60);
    time = mins + ":" + secs;
    mins = parseInt(Math.floor(duration / 60));
    secs = this._pad(duration - mins * 60);
    duration = mins + ":" + secs;
    return this.node.innerHTML = time + " / " + duration;
  };

  TimeDisplay.prototype._css = function() {
    return "font-family: Arial; padding-top: " + ((this.data.controls.height - this.data.controls.videoSeek.barHeight) * 0.5 - 6) + "px; font-size: 12px; float: right; color: " + this.data.controls.buttons.color + ";";
  };

  TimeDisplay.prototype._pad = function(num) {
    num = parseInt(num);
    if (num < 10) {
      num = "0" + String(num);
    }
    return num;
  };

  return TimeDisplay;

})();

player.view.ControlsView = (function(superClass) {
  var ControlsEvent, FullScreenButton, PauseButton, PlayButton, Skin, SoundOffButton, SoundOnButton, SoundSeek, TimeDisplay, VideoSeek;

  extend(ControlsView, superClass);

  TimeDisplay = player.view.controls.TimeDisplay;

  FullScreenButton = player.view.controls.FullScreenButton;

  SoundOffButton = player.view.controls.SoundOffButton;

  SoundOnButton = player.view.controls.SoundOnButton;

  PauseButton = player.view.controls.PauseButton;

  PlayButton = player.view.controls.PlayButton;

  SoundSeek = player.view.controls.SoundSeek;

  VideoSeek = player.view.controls.VideoSeek;

  Skin = player.view.controls.Skin;

  ControlsEvent = player.event.ControlsEvent;

  ControlsView.prototype.visible = false;

  function ControlsView() {
    this._setOpacity = bind(this._setOpacity, this);
    this._fadeTo = bind(this._fadeTo, this);
    this._css = bind(this._css, this);
    this._onSkinLoaded = bind(this._onSkinLoaded, this);
    this.disable = bind(this.disable, this);
    this.enable = bind(this.enable, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.pause = bind(this.pause, this);
    this.play = bind(this.play, this);
    this.setVolume = bind(this.setVolume, this);
    this.setTime = bind(this.setTime, this);
    this.setBuffer = bind(this.setBuffer, this);
    this.render = bind(this.render, this);
    ControlsView.__super__.constructor.call(this);
    this.skin = new Skin(this);
    this.videoSeek = new VideoSeek(this);
    this.playBtn = new PlayButton(this);
    this.pauseBtn = new PauseButton(this);
    this.soundOnBtn = new SoundOnButton(this);
    this.soundOffBtn = new SoundOffButton(this);
    this.soundSeek = new SoundSeek(this);
    this.fullScreenBtn = new FullScreenButton(this);
    this.timeDisplay = new TimeDisplay(this);
    this.skin.on(ControlsEvent.SKIN_LOADED, this._onSkinLoaded);
  }

  ControlsView.prototype.render = function(data1) {
    this.data = data1;
    this.data.parent.appendChild(this.node);
    this.node.style.cssText = this._css();
    this.node.onmouseover = (function(_this) {
      return function() {
        return _this.show();
      };
    })(this);
    this.node.onmouseout = (function(_this) {
      return function() {
        return _this.hide(0.5);
      };
    })(this);
    window.onmouseout = (function(_this) {
      return function() {
        return _this.hide(0.5);
      };
    })(this);
    this.skin.render(this.data);
    this.videoSeek.render(this.data);
    this.soundSeek.render(this.data);
    this.timeDisplay.render(this.data);
    return this.enable();
  };

  ControlsView.prototype.setBuffer = function(percent) {
    return this.videoSeek.setBuffer(percent);
  };

  ControlsView.prototype.setTime = function(time, duration) {
    this.videoSeek.setTime(time, duration);
    return this.timeDisplay.setTime(time, duration);
  };

  ControlsView.prototype.setVolume = function(volume) {
    this.soundSeek.setVolume(volume);
    if (volume === 0) {
      this.soundOnBtn.hide();
      return this.soundOffBtn.show();
    } else {
      this.soundOffBtn.hide();
      return this.soundOnBtn.show();
    }
  };

  ControlsView.prototype.play = function() {
    this.playBtn.hide();
    return this.pauseBtn.show();
  };

  ControlsView.prototype.pause = function() {
    this.playBtn.show();
    return this.pauseBtn.hide();
  };

  ControlsView.prototype.show = function() {
    this.visible = true;
    return this._fadeTo(1);
  };

  ControlsView.prototype.hide = function(delay) {
    this.visible = false;
    return this._fadeTo(0, delay);
  };

  ControlsView.prototype.enable = function() {
    if (!this.data) {
      return;
    }
    this.node.style.width = this.data.video.width + "px";
    return this.node.style.overflow = "";
  };

  ControlsView.prototype.disable = function() {
    this.node.style.width = "0px";
    return this.node.style.overflow = "hidden";
  };

  ControlsView.prototype._onSkinLoaded = function() {
    this.playBtn.render(this.data, this.skin);
    this.pauseBtn.render(this.data, this.skin);
    this.soundOnBtn.render(this.data, this.skin);
    this.soundOffBtn.render(this.data, this.skin);
    return this.fullScreenBtn.render(this.data, this.skin);
  };

  ControlsView.prototype._css = function() {
    return "top: " + (this.data.video.height - this.data.controls.height) + "px; background-color: " + this.data.controls.backgroundColor + "; height: " + this.data.controls.height + "px; position: absolute; width: " + this.data.video.width + "px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;";
  };

  ControlsView.prototype._fadeTo = function(opacity, delay) {
    var transition;
    if (delay == null) {
      delay = 0;
    }
    transition = "opacity 0.15s ease-in-out";
    this.node.style.webkitTransition = transition;
    this.node.style.mozTransition = transition;
    this.node.style.msTransition = transition;
    this.node.transition = transition;
    return setTimeout(((function(_this) {
      return function() {
        return _this._setOpacity(opacity);
      };
    })(this)), delay * 1000);
  };

  ControlsView.prototype._setOpacity = function(opacity) {
    if (opacity === 0 && this.visible) {
      return;
    }
    return this.node.style.opacity = opacity;
  };

  return ControlsView;

})(player.view.View);

player.view.LoadView = (function(superClass) {
  extend(LoadView, superClass);

  function LoadView() {
    this._textCss = bind(this._textCss, this);
    this._css = bind(this._css, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    this.render = bind(this.render, this);
    LoadView.__super__.constructor.call(this);
    this.textNode = document.createElement("div");
    this.textNode.innerHTML = "loading player...";
    this.node.appendChild(this.textNode);
    this.node.style.display = "none";
  }

  LoadView.prototype.render = function(data1) {
    this.data = data1;
    this.data.parent.appendChild(this.node);
    this.node.style.cssText = this._css();
    return this.textNode.style.cssText = this._textCss();
  };

  LoadView.prototype.show = function() {
    this.node.style.visibility = "visible";
    return this.node.style.display = "block";
  };

  LoadView.prototype.hide = function() {
    return this.node.style.display = "none";
  };

  LoadView.prototype._css = function() {
    return "position: absolute; width: 100%; height: 100%; background-color: black; top: 0;";
  };

  LoadView.prototype._textCss = function() {
    return "font-size: 13px; color: white; margin-top: " + (this.data.video.height * 0.5) + "px; text-align: center;";
  };

  return LoadView;

})(player.view.View);

player.view.ViewCollection = (function() {
  var AdView, ControlsView, LoadView, VideoView;

  LoadView = player.view.LoadView;

  ControlsView = player.view.ControlsView;

  AdView = player.view.AdView;

  VideoView = player.view.VideoView;

  function ViewCollection() {
    this.videoView = new VideoView();
    this.adView = new AdView();
    this.controlsView = new ControlsView();
    this.loadView = new LoadView();
  }

  return ViewCollection;

})();

player.controller.VideoController = (function() {
  var ControlsEvent, Event;

  Event = core.event.Event;

  ControlsEvent = player.event.ControlsEvent;

  function VideoController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    this._onFullScreened = bind(this._onFullScreened, this);
    this._onUnmuted = bind(this._onUnmuted, this);
    this._onMuted = bind(this._onMuted, this);
    this._onPaused = bind(this._onPaused, this);
    this._onPlayed = bind(this._onPlayed, this);
    this._onVideoSeekEnded = bind(this._onVideoSeekEnded, this);
    this._onVideoSeekStarted = bind(this._onVideoSeekStarted, this);
    this._onSoundSeeked = bind(this._onSoundSeeked, this);
    this._onResize = bind(this._onResize, this);
    data = this.models.playerConfigModel.getData();
    this.models.playerConfigModel.on(Event.RESIZE, this._onResize);
    this.views.controlsView.on(ControlsEvent.SOUND_SEEKED, this._onSoundSeeked);
    this.views.controlsView.on(ControlsEvent.VIDEO_SEEK_STARTED, this._onVideoSeekStarted);
    this.views.controlsView.on(ControlsEvent.VIDEO_SEEK_ENDED, this._onVideoSeekEnded);
    this.views.controlsView.on(ControlsEvent.PLAYED, this._onPlayed);
    this.views.controlsView.on(ControlsEvent.PAUSED, this._onPaused);
    this.views.controlsView.on(ControlsEvent.MUTED, this._onMuted);
    this.views.controlsView.on(ControlsEvent.UNMUTED, this._onUnmuted);
    this.views.controlsView.on(ControlsEvent.FULL_SCREENED, this._onFullScreened);
    this.views.videoView.render(data);
  }

  VideoController.prototype._onResize = function(event) {
    var height, width;
    width = event.data.width;
    height = event.data.height;
    return this.views.videoView.resize(width, height);
  };

  VideoController.prototype._onSoundSeeked = function(event) {
    return this.views.videoView.setVolume(event.data.volume);
  };

  VideoController.prototype._onVideoSeekStarted = function(event) {
    return this.views.videoView.pause();
  };

  VideoController.prototype._onVideoSeekEnded = function(event) {
    this.views.videoView.setTime(null, event.data.percent);
    return this.views.videoView.play();
  };

  VideoController.prototype._onPlayed = function() {
    return this.views.videoView.play();
  };

  VideoController.prototype._onPaused = function() {
    return this.views.videoView.pause();
  };

  VideoController.prototype._onMuted = function() {
    return this.views.videoView.mute();
  };

  VideoController.prototype._onUnmuted = function() {
    return this.views.videoView.unmute();
  };

  VideoController.prototype._onFullScreened = function() {
    return this.views.videoView.requestFullScreen();
  };

  return VideoController;

})();

player.controller.AdController = (function() {
  var Event, VideoEvent;

  Event = core.event.Event;

  VideoEvent = player.event.VideoEvent;

  AdController.prototype.ad = null;

  function AdController(player1) {
    this.player = player1;
    this._onEnterFullScreen = bind(this._onEnterFullScreen, this);
    this._onAdReported = bind(this._onAdReported, this);
    this._onAdStopped = bind(this._onAdStopped, this);
    this._onAdStarted = bind(this._onAdStarted, this);
    this._onAdManagerReady = bind(this._onAdManagerReady, this);
    this._createManager = bind(this._createManager, this);
    this._initViews = bind(this._initViews, this);
    this._onResize = bind(this._onResize, this);
    if (!window.SizmekAdManager) {
      return null;
    }
    this.models = this.player.models;
    this.views = this.player.views;
    this._initViews();
    this._createManager();
    this.views.videoView.on(VideoEvent.ENTER_FULL_SCREEN, this._onEnterFullScreen);
    this.models.playerConfigModel.on(Event.RESIZE, this._onResize);
  }

  AdController.prototype._onResize = function(event) {
    var height, width;
    width = event.data.width;
    height = event.data.height;
    this.adManager.resize(width, height);
    return this.views.adView.resize(width, height);
  };

  AdController.prototype._initViews = function() {
    this.views.controlsView.hide();
    this.views.videoView.hide();
    this.views.adView.hide();
    return this.views.loadView.show();
  };

  AdController.prototype._createManager = function() {
    var ads, config, container, data, video;
    ads = this.models.adConfigModel.getData();
    video = this.views.videoView.video;
    container = this.views.adView.node;
    data = {
      noSize: this.player.config.noSize
    };
    config = {
      videoTag: video,
      adContainer: container,
      ads: ads,
      data: data
    };
    this.adManager = new SizmekAdManager(config);
    this.adManager.on("pluginReady", this._onAdManagerReady);
    this.adManager.on("adStarted", this._onAdStarted);
    this.adManager.on("adStopped", this._onAdStopped);
    return this.adManager.on("adReported", this._onAdReported);
  };

  AdController.prototype._onAdManagerReady = function() {
    var data;
    data = this.models.playerConfigModel.getData();
    this.views.adView.render(data);
    this.views.controlsView.show();
    this.views.videoView.show();
    return this.views.loadView.hide();
  };

  AdController.prototype._onAdStarted = function(event) {
    this.ad = event.data.ad;
    this.views.adView.show();
    if (this.ad.format === "Linear") {
      this.views.controlsView.disable();
      this.views.videoView.disableControls();
    }
    return this.player.emit("adStarted", event.data);
  };

  AdController.prototype._onAdStopped = function(event) {
    this.ad = false;
    this.views.adView.hide();
    this.views.controlsView.enable();
    this.views.controlsView.hide();
    this.views.videoView.enableControls();
    return this.player.emit("adStopped", event.data);
  };

  AdController.prototype._onAdReported = function(event) {
    return this.player.emit("adReported", event.data);
  };

  AdController.prototype._onEnterFullScreen = function() {
    if (this.ad) {
      return this.views.videoView.disableControls();
    }
  };

  return AdController;

})();

player.controller.ControlsController = (function() {
  var Utils, VideoEvent;

  VideoEvent = player.event.VideoEvent;

  Utils = core.common.Utils;

  function ControlsController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    this._onMouseOver = bind(this._onMouseOver, this);
    this._onBufferChanged = bind(this._onBufferChanged, this);
    this._onTimeChanged = bind(this._onTimeChanged, this);
    this._onPaused = bind(this._onPaused, this);
    this._onPlayed = bind(this._onPlayed, this);
    this._onVolumeChanged = bind(this._onVolumeChanged, this);
    if (Utils.isMobile()) {
      return this;
    }
    data = this.models.playerConfigModel.getData();
    this.views.videoView.on(VideoEvent.VOLUME_CHANGED, this._onVolumeChanged);
    this.views.videoView.on(VideoEvent.PLAYED, this._onPlayed);
    this.views.videoView.on(VideoEvent.PAUSED, this._onPaused);
    this.views.videoView.on(VideoEvent.TIME_CHANGED, this._onTimeChanged);
    this.views.videoView.on(VideoEvent.BUFFER_CHANGED, this._onBufferChanged);
    this.views.videoView.on(VideoEvent.MOUSE_OVER, this._onMouseOver);
    this.views.controlsView.render(data);
  }

  ControlsController.prototype._onVolumeChanged = function(event) {
    return this.views.controlsView.setVolume(event.data.volume);
  };

  ControlsController.prototype._onPlayed = function(event) {
    return this.views.controlsView.play();
  };

  ControlsController.prototype._onPaused = function(event) {
    return this.views.controlsView.pause();
  };

  ControlsController.prototype._onTimeChanged = function(event) {
    return this.views.controlsView.setTime(event.data.time, event.data.duration);
  };

  ControlsController.prototype._onBufferChanged = function(event) {
    return this.views.controlsView.setBuffer(event.data.percent);
  };

  ControlsController.prototype._onMouseOver = function(event) {
    return this.views.controlsView.show();
  };

  return ControlsController;

})();

player.controller.LoadController = (function() {
  function LoadController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    data = this.models.playerConfigModel.getData();
    this.views.loadView.render(data);
  }

  return LoadController;

})();

player.controller.ControllerCollection = (function() {
  var AdController, ControlsController, LoadController, VideoController;

  LoadController = player.controller.LoadController;

  ControlsController = player.controller.ControlsController;

  AdController = player.controller.AdController;

  VideoController = player.controller.VideoController;

  function ControllerCollection(player1) {
    this.player = player1;
    this.videoController = new VideoController(this.player.models, this.player.views);
    this.controlsController = new ControlsController(this.player.models, this.player.views);
    this.adController = new AdController(this.player);
    this.loadController = new LoadController(this.player.models, this.player.views);
  }

  return ControllerCollection;

})();

player.Html5Player = (function(superClass) {
  var ControllerCollection, ModelCollection, Utils, ViewCollection;

  extend(Html5Player, superClass);

  Utils = core.common.Utils;

  ControllerCollection = player.controller.ControllerCollection;

  ViewCollection = player.view.ViewCollection;

  ModelCollection = player.model.ModelCollection;

  function Html5Player(config1) {
    this.config = config1 != null ? config1 : {};
    this._onDomLoaded = bind(this._onDomLoaded, this);
    this.resize = bind(this.resize, this);
    Html5Player.__super__.constructor.call(this);
    if (Utils.domLoaded()) {
      this._onDomLoaded();
    } else {
      Utils.on(window, "load", this._onDomLoaded);
    }
  }

  Html5Player.prototype.resize = function(width, height) {
    if (this.models) {
      return this.models.playerConfigModel.resize(width, height);
    }
  };

  Html5Player.prototype._onDomLoaded = function() {
    this.models = new ModelCollection(this.config);
    this.views = new ViewCollection();
    return this.controllers = new ControllerCollection(this);
  };

  return Html5Player;

})(core.event.EventDispatcher);

window.SizmekHtml5Player = player.Html5Player;
