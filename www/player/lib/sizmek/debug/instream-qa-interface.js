// Generated by CoffeeScript 1.12.7
var core, qaInterface, qainterface,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

core = this.core || {};

core.common = this.core.common || {};

core.event = this.core.event || {};

core.model = this.core.model || {};

qainterface = this.qainterface || {};

qainterface.controller = this.qainterface.controller || {};

qainterface.event = this.qainterface.event || {};

qainterface.model = this.qainterface.model || {};

qainterface.view = this.qainterface.view || {};

core.event.EventDispatcher = (function() {
  function EventDispatcher(listeners) {
    this.listeners = listeners != null ? listeners : [];
    this.dispatchEvent = bind(this.dispatchEvent, this);
    this.removeEventListener = bind(this.removeEventListener, this);
    this.addEventListener = bind(this.addEventListener, this);
    this.on = this.addEventListener;
    this.off = this.removeEventListener;
    this.emit = this.dispatchEvent;
  }

  EventDispatcher.prototype.addEventListener = function(type, callback) {
    var listener;
    listener = {
      type: type,
      callback: callback
    };
    return this.listeners.push(listener);
  };

  EventDispatcher.prototype.removeEventListener = function(type, callback) {
    var i, j, listener, ref, results1;
    results1 = [];
    for (i = j = ref = this.listeners.length - 1; ref <= 0 ? j < 0 : j > 0; i = ref <= 0 ? ++j : --j) {
      listener = this.listeners[i];
      if (listener.type === type && listener.callback === callback) {
        results1.push(this.listeners.splice(i, 1));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  EventDispatcher.prototype.dispatchEvent = function(type, data) {
    var event, j, len, listener, ref, results1;
    if (data == null) {
      data = null;
    }
    event = {
      target: this,
      type: type,
      data: data
    };
    ref = this.listeners;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      listener = ref[j];
      if (listener.type === type) {
        results1.push(listener.callback(event));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  return EventDispatcher;

})();

core.event.Event = (function() {
  function Event() {}

  Event.MODEL_CHANGED = "modelChanged";

  Event.READY = "ready";

  Event.RESIZE = "resize";

  return Event;

})();

core.common.Utils = (function() {
  function Utils() {}

  Utils.setCookie = function(name, value) {
    return document.cookie = name + "=" + value;
  };

  Utils.getCookie = function(name) {
    var end, start, val;
    if (document.cookie.indexOf(name + "=") === -1) {
      return void 0;
    }
    start = void 0;
    end = void 0;
    if (document.cookie.length > 0) {
      start = document.cookie.indexOf(name + "=");
    }
    if (start !== -1) {
      start = start + name.length + 1;
      end = document.cookie.indexOf(";", start);
      if (end === -1) {
        end = document.cookie.length;
      }
      val = unescape(document.cookie.substring(start, end));
      if (val === "true") {
        val = true;
      }
      if (val === "false") {
        val = false;
      }
      if (val === "undefined") {
        val = void 0;
      }
      if (val === "undefined") {
        val = null;
      }
      return val;
    }
    return void 0;
  };

  Utils.clearCookie = function(key) {
    return document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
  };

  Utils.clearCookies = function() {
    var cookie, cookies, j, key, len, pos, results1;
    cookies = document.cookie.split(";");
    results1 = [];
    for (j = 0, len = cookies.length; j < len; j++) {
      cookie = cookies[j];
      pos = cookie.indexOf("=");
      key = pos > -1 ? cookie.substr(0, pos) : cookie;
      results1.push(document.cookie = key + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT");
    }
    return results1;
  };

  Utils.getQuery = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    return (results == null ? void 0 : decodeURIComponent(results[1].replace(/\+/g, " ")));
  };

  Utils.searchify = function(obj) {
    var a, key, value;
    a = [];
    for (key in obj) {
      key = encodeURIComponent(key);
      value = encodeURIComponent(obj[key]);
      a.push(key + "=" + value);
    }
    return a.join("&");
  };

  Utils.on = function(obj, type, fn) {
    if (obj.addEventListener) {
      return obj.addEventListener(type, fn, false);
    } else if (obj.attachEvent) {
      obj["e" + type + fn] = fn;
      return obj[type + fn] = function() {
        return obj["e" + type + fn](window.event);
      };
    }
  };

  Utils.off = function(obj, type, fn) {
    if (obj.removeEventListener) {
      return obj.removeEventListener(type, fn, false);
    } else if (obj.detachEvent) {
      obj.detachEvent("on" + type, obj[type + fn]);
      obj[type + fn] = null;
      return obj["e" + type + fn] = null;
    }
  };

  Utils.domLoaded = function() {
    return document.readyState === "complete" || document.readyState === "interactive";
  };

  Utils.request = function(url, callback) {
    var req;
    req = new XMLHttpRequest();
    req.open("GET", url, true);
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200 && req.status !== 304) {
        return typeof callback === "function" ? callback({
          error: true
        }) : void 0;
      } else {
        return typeof callback === "function" ? callback({
          data: req.responseText
        }) : void 0;
      }
    };
    return req.send();
  };

  Utils["typeof"] = function(obj) {
    var str;
    if (obj == null) {
      return false;
    }
    str = obj.constructor.toString();
    str = str.split("()")[0];
    str = str.replace("function ", "");
    str = str.trim();
    if (str.length > 0) {
      return str;
    } else {
      return false;
    }
  };

  Utils.loadScript = function(url, callback) {
    var head, script;
    script = document.createElement("script");
    script.src = url;
    script.onload = callback;
    head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
    return script;
  };

  Utils.getPosition = function(el) {
    var x, y;
    x = 0;
    y = 0;
    while (el) {
      x += el.offsetLeft - el.scrollLeft + el.clientLeft;
      y += el.offsetTop - el.scrollTop + el.clientTop;
      el = el.offsetParent;
    }
    return {
      x: x,
      y: y
    };
  };

  Utils.isMobile = function() {
    var exp, matches;
    exp = /(Android)|(iPhone)|(webOS)|(iPad)|(iPod)|(BlackBerry)|(Windows Phone)/i;
    matches = navigator.userAgent.match(exp);
    return Boolean(matches);
  };

  Utils.getScreenSize = function() {
    var ratio;
    ratio = window.devicePixelRatio > 1 ? window.devicePixelRatio : 1;
    return {
      width: screen.width / ratio({
        height: screen.height / ratio
      })
    };
  };

  return Utils;

})();

core.model.Model = (function(superClass) {
  var Event, Utils;

  extend(Model, superClass);

  Utils = core.common.Utils;

  Event = core.event.Event;

  Model.prototype.data = {};

  function Model() {
    this._checkCookies = bind(this._checkCookies, this);
    this._checkQueries = bind(this._checkQueries, this);
    this.pullData = bind(this.pullData, this);
    this.getData = bind(this.getData, this);
    this.setData = bind(this.setData, this);
    Model.__super__.constructor.call(this);
    this.pullData();
  }

  Model.prototype.setData = function(key, value) {
    this.data[key] = value;
    return this.dispatchEvent(Event.MODEL_CHANGED, {
      key: key,
      value: value
    });
  };

  Model.prototype.getData = function(key) {
    if (key === void 0) {
      return this.data;
    } else {
      return this.data[key];
    }
  };

  Model.prototype.pullData = function() {};

  Model.prototype._checkQueries = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getQuery(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  Model.prototype._checkCookies = function() {
    var key, results1, value;
    results1 = [];
    for (key in this.data) {
      value = Utils.getCookie(key);
      if (value === "true") {
        value = true;
      }
      if (value === "false") {
        value = false;
      }
      results1.push(this.data[key] = value != null ? value : this.data[key]);
    }
    return results1;
  };

  return Model;

})(core.event.EventDispatcher);

qainterface.model.AdConfigModel = (function(superClass) {
  extend(AdConfigModel, superClass);

  AdConfigModel.prototype.data = {
    "preroll": "",
    "midroll": "",
    "postroll": "",
    "overlay": ""
  };

  function AdConfigModel() {
    this.pullData = bind(this.pullData, this);
    AdConfigModel.__super__.constructor.call(this);
  }

  AdConfigModel.prototype.pullData = function() {
    return this._checkQueries();
  };

  return AdConfigModel;

})(core.model.Model);

qainterface.model.AdHistoryModel = (function(superClass) {
  var Utils;

  extend(AdHistoryModel, superClass);

  Utils = core.common.Utils;

  AdHistoryModel.prototype.data = {
    "preroll-history": "",
    "midroll-history": "",
    "postroll-history": "",
    "overlay-history": ""
  };

  function AdHistoryModel() {
    this.pullData = bind(this.pullData, this);
    this.reset = bind(this.reset, this);
    this.setData = bind(this.setData, this);
    AdHistoryModel.__super__.constructor.call(this);
  }

  AdHistoryModel.prototype.setData = function(key, value) {
    var current;
    current = this.data[key];
    if (current.length > 0) {
      value = "," + value;
    }
    value = current + value;
    Utils.setCookie(key, value);
    return AdHistoryModel.__super__.setData.call(this, key, value);
  };

  AdHistoryModel.prototype.reset = function() {
    var j, key, len, ref, results1;
    ref = this.data;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      Utils.setCookie(key, "");
      results1.push(this.data[key] = "");
    }
    return results1;
  };

  AdHistoryModel.prototype.pullData = function() {
    return this._checkCookies();
  };

  return AdHistoryModel;

})(core.model.Model);

qainterface.model.SectionsStateModel = (function(superClass) {
  var Utils;

  extend(SectionsStateModel, superClass);

  Utils = core.common.Utils;

  SectionsStateModel.prototype.data = {
    "view-id": "ad-config"
  };

  function SectionsStateModel() {
    this.reset = bind(this.reset, this);
    this.pullData = bind(this.pullData, this);
    this.setData = bind(this.setData, this);
    SectionsStateModel.__super__.constructor.call(this);
  }

  SectionsStateModel.prototype.setData = function(key, value) {
    Utils.setCookie(key, value);
    return SectionsStateModel.__super__.setData.call(this, key, value);
  };

  SectionsStateModel.prototype.pullData = function() {
    return this._checkCookies();
  };

  SectionsStateModel.prototype.reset = function() {
    var key, results1;
    results1 = [];
    for (key in this.data) {
      results1.push(Utils.clearCookie(key));
    }
    return results1;
  };

  return SectionsStateModel;

})(core.model.Model);

qainterface.model.PlayerConfigModel = (function(superClass) {
  extend(PlayerConfigModel, superClass);

  PlayerConfigModel.prototype.data = {
    "player-type": "html5",
    "width": 640,
    "height": 360,
    "auto-start": false,
    "script-access": "always",
    "wmode": "opaque"
  };

  function PlayerConfigModel() {
    this.pullData = bind(this.pullData, this);
    PlayerConfigModel.__super__.constructor.call(this);
  }

  PlayerConfigModel.prototype.pullData = function() {
    return this._checkQueries();
  };

  return PlayerConfigModel;

})(core.model.Model);

qainterface.model.ModelCollection = (function() {
  var AdConfigModel, AdHistoryModel, PlayerConfigModel, SectionsStateModel;

  PlayerConfigModel = qainterface.model.PlayerConfigModel;

  SectionsStateModel = qainterface.model.SectionsStateModel;

  AdHistoryModel = qainterface.model.AdHistoryModel;

  AdConfigModel = qainterface.model.AdConfigModel;

  function ModelCollection() {
    this.adConfigModel = new AdConfigModel();
    this.adHistoryModel = new AdHistoryModel();
    this.sectionsStateModel = new SectionsStateModel();
    this.playerConfigModel = new PlayerConfigModel();
  }

  return ModelCollection;

})();

qainterface.event.Event = (function() {
  function Event() {}

  Event.SECTION_BTN_CLICKED = "sectionBtnClicked";

  Event.SUBMIT_SELECTED = "submitSelected";

  Event.RESET_SELECTED = "resetSelected";

  Event.PLAYER_LOADED = "playerLoaded";

  return Event;

})();

qainterface.view.SectionView = (function(superClass) {
  var Event;

  extend(SectionView, superClass);

  Event = qainterface.event.Event;

  function SectionView(id1) {
    this.id = id1;
    this._onButtonClicked = bind(this._onButtonClicked, this);
    this.hide = bind(this.hide, this);
    this.show = bind(this.show, this);
    SectionView.__super__.constructor.call(this);
    this.node = document.getElementById(this.id);
    this.buttonNode = document.getElementById(this.id + "-btn");
    this.contentNode = this.node.getElementsByClassName("content")[0];
    this.buttonNode.onclick = this._onButtonClicked;
  }

  SectionView.prototype.show = function() {
    this.node.className = "section active";
    return this.buttonNode.className = "active";
  };

  SectionView.prototype.hide = function() {
    this.node.className = "section inactive";
    return this.buttonNode.className = "inactive";
  };

  SectionView.prototype._onButtonClicked = function() {
    return this.dispatchEvent(Event.SECTION_BTN_CLICKED, {
      view: this
    });
  };

  return SectionView;

})(core.event.EventDispatcher);

qainterface.view.AdConfigView = (function(superClass) {
  extend(AdConfigView, superClass);

  function AdConfigView() {
    this.render = bind(this.render, this);
    AdConfigView.__super__.constructor.call(this, "ad-config");
    this.preNode = document.getElementById("ad-pre");
    this.midNode = document.getElementById("ad-mid");
    this.postNode = document.getElementById("ad-post");
    this.overNode = document.getElementById("ad-over");
  }

  AdConfigView.prototype.render = function(data) {
    this.preNode.value = data.preroll;
    this.midNode.value = data.midroll;
    this.postNode.value = data.postroll;
    return this.overNode.value = data.overlay;
  };

  return AdConfigView;

})(qainterface.view.SectionView);

qainterface.view.PlayerConfigView = (function(superClass) {
  extend(PlayerConfigView, superClass);

  function PlayerConfigView() {
    this._configFlashViews = bind(this._configFlashViews, this);
    this.render = bind(this.render, this);
    PlayerConfigView.__super__.constructor.call(this, "player-config");
    this.typeNode = document.getElementById("player-type");
    this.widthNode = document.getElementById("player-width");
    this.heightNode = document.getElementById("player-height");
    this.controlsNode = document.getElementById("player-controls");
    this.autoStartNode = document.getElementById("player-auto-start");
    this.scriptAccessNode = document.getElementById("player-script-access");
    this.wmodeNode = document.getElementById("player-wmode");
    this.typeNode.onchange = this._configFlashViews;
  }

  PlayerConfigView.prototype.render = function(data) {
    var index;
    this.typeNode.selectedIndex = data["player-type"] === "as3" ? 0 : 1;
    this.widthNode.value = data["width"] ? data["width"] : 640;
    this.heightNode.value = data["height"] ? data["height"] : 360;
    this.controlsNode.selectedIndex = data["controls"] === "over" ? 0 : 1;
    this.autoStartNode.selectedIndex = data["auto-start"] ? 0 : 1;
    switch (data["script-access"]) {
      case "always":
        index = 0;
        break;
      case "same":
        index = 1;
        break;
      case "never":
        index = 2;
        break;
      default:
        index = 0;
    }
    this.scriptAccessNode.selectedIndex = index;
    switch (data["wmode"]) {
      case "opaque":
        index = 0;
        break;
      case "window":
        index = 1;
        break;
      case "trans":
        index = 2;
        break;
      default:
        index = 0;
    }
    this.wmodeNode.selectedIndex = index;
    return this._configFlashViews();
  };

  PlayerConfigView.prototype._configFlashViews = function() {
    var display, value;
    value = this.typeNode.options[this.typeNode.selectedIndex].value;
    display = value === "as3" ? "block" : "none";
    this.scriptAccessNode.parentNode.style.display = display;
    return this.wmodeNode.parentNode.style.display = display;
  };

  return PlayerConfigView;

})(qainterface.view.SectionView);

qainterface.view.ReportingView = (function(superClass) {
  extend(ReportingView, superClass);

  function ReportingView() {
    this.render = bind(this.render, this);
    ReportingView.__super__.constructor.call(this, "ad-reporting");
  }

  ReportingView.prototype.render = function(data) {
    var key, node, results1, value;
    results1 = [];
    for (key in data) {
      value = data[key];
      node = document.getElementById("" + key);
      if (node) {
        results1.push(node != null ? node.innerHTML = value : void 0);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  return ReportingView;

})(qainterface.view.SectionView);

qainterface.view.AdDataView = (function(superClass) {
  extend(AdDataView, superClass);

  function AdDataView() {
    this.render = bind(this.render, this);
    AdDataView.__super__.constructor.call(this, "ad-data");
    this.node = document.getElementById("ad-data");
    this.contentNode = this.node.getElementsByClassName("content")[0];
  }

  AdDataView.prototype.render = function(data) {
    data = vkbeautify.xml(data);
    data = data.replace(/\</g, "&lt;");
    data = data.replace(/\>/g, "&gt;");
    return this.contentNode.innerHTML = "<pre>" + data + "</pre>";
  };

  return AdDataView;

})(qainterface.view.SectionView);

qainterface.view.ResetBtnView = (function(superClass) {
  var Event;

  extend(ResetBtnView, superClass);

  Event = qainterface.event.Event;

  function ResetBtnView() {
    this._onMouseOut = bind(this._onMouseOut, this);
    this._onMouseOver = bind(this._onMouseOver, this);
    this._onNodeClicked = bind(this._onNodeClicked, this);
    ResetBtnView.__super__.constructor.call(this);
    this.node = document.getElementById("reset-btn");
    this.node.onclick = this._onNodeClicked;
    this.node.onmouseover = this._onMouseOver;
    this.node.onmouseout = this._onMouseOut;
  }

  ResetBtnView.prototype._onNodeClicked = function() {
    this.node.className = "btn click";
    return this.dispatchEvent(Event.RESET_SELECTED);
  };

  ResetBtnView.prototype._onMouseOver = function() {
    return this.node.className = "btn over";
  };

  ResetBtnView.prototype._onMouseOut = function() {
    return this.node.className = "btn";
  };

  return ResetBtnView;

})(core.event.EventDispatcher);

qainterface.view.PlayerView = (function(superClass) {
  var Event;

  extend(PlayerView, superClass);

  Event = qainterface.event.Event;

  function PlayerView() {
    this._onFrameLoaded = bind(this._onFrameLoaded, this);
    this.render = bind(this.render, this);
    PlayerView.__super__.constructor.call(this);
    this.container = document.getElementById("player");
    this.frame = document.getElementById("player-iframe");
  }

  PlayerView.prototype.render = function(data) {
    var e, height, width;
    width = data.config.width ? Number(data.config.width) : 640;
    height = data.config.height ? Number(data.config.height) : 360;
    document.body.style.minWidth = width + "px";
    this.container.style.width = width + "px";
    this.container.style.height = height + "px";
    try {
      if (data.config["player-type"] === "html5") {
        return parent.document.getElementById("html5Column").style.visibility = "visible";
      }
    } catch (error) {
      e = error;
    } finally {
      this.frame.scrolling = "no";
      this.frame.onload = this._onFrameLoaded;
      this.frame.src = "base-interfaceDebug.html?" + data.search;
      this.frame.setAttribute("allowfullscreen", "");
      this.frame.setAttribute("frameborder", 0);
    }
  };

  PlayerView.prototype._onFrameLoaded = function() {
    return this.dispatchEvent(Event.PLAYER_LOADED);
  };

  return PlayerView;

})(core.event.EventDispatcher);

qainterface.view.SubmitBtnView = (function(superClass) {
  var Event;

  extend(SubmitBtnView, superClass);

  Event = qainterface.event.Event;

  function SubmitBtnView() {
    this._onKeyPress = bind(this._onKeyPress, this);
    this._onMouseOut = bind(this._onMouseOut, this);
    this._onMouseOver = bind(this._onMouseOver, this);
    this._onNodeClicked = bind(this._onNodeClicked, this);
    SubmitBtnView.__super__.constructor.call(this);
    this.node = document.getElementById("submit-btn");
    this.node.onclick = this._onNodeClicked;
    this.node.onmouseover = this._onMouseOver;
    this.node.onmouseout = this._onMouseOut;
    document.body.addEventListener("keypress", this._onKeyPress);
  }

  SubmitBtnView.prototype._onNodeClicked = function() {
    this.node.className = "btn click";
    return this.dispatchEvent(Event.SUBMIT_SELECTED);
  };

  SubmitBtnView.prototype._onMouseOver = function() {
    return this.node.className = "btn over";
  };

  SubmitBtnView.prototype._onMouseOut = function() {
    return this.node.className = "btn";
  };

  SubmitBtnView.prototype._onKeyPress = function(event) {
    var key;
    key = event.which || event.keyCode;
    if (key === 13) {
      return this._onNodeClicked();
    }
  };

  return SubmitBtnView;

})(core.event.EventDispatcher);

qainterface.view.CompanionView = (function(superClass) {
  var Utils;

  extend(CompanionView, superClass);

  Utils = core.common.Utils;

  function CompanionView() {
    this.render = bind(this.render, this);
    CompanionView.__super__.constructor.call(this, "ad-companion");
  }

  CompanionView.prototype.render = function(data1) {
    var ad, j, len, node, ref, results1, url;
    this.data = data1;
    this.node.innerHTML = "";
    ref = this.data.ads;
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ad = ref[j];
      node = document.createElement("div");
      node.className = "ad";
      node.style.width = ad.width + "px";
      node.style.height = ad.height + "px";
      node.appendChild(ad.resource);
      this.node.appendChild(node);
      results1.push((function() {
        var k, len1, ref1, results2;
        ref1 = ad.tracking;
        results2 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          url = ref1[k];
          results2.push(Utils.request(url));
        }
        return results2;
      })());
    }
    return results1;
  };

  return CompanionView;

})(qainterface.view.SectionView);

qainterface.view.MobileView = (function() {
  var Utils;

  Utils = core.common.Utils;

  function MobileView() {
    this._css = bind(this._css, this);
    this._paint = bind(this._paint, this);
    this.render = bind(this.render, this);
    this.node = document.getElementById("wrapper");
  }

  MobileView.prototype.render = function(data1) {
    this.data = data1;
    if (!navigator.userAgent.match(/(Android)|(iPhone)/i)) {
      return;
    }
    document.body.style.minWidth = "";
    Utils.on(window, "orientationchange", this._paint);
    Utils.on(window, "resize", this._paint);
    return this._paint();
  };

  MobileView.prototype._paint = function() {
    this.scale = document.body.offsetWidth / this.data.width;
    return this.node.style.cssText = this._css();
  };

  MobileView.prototype._css = function() {
    return "max-width: " + this.data.width + "px; transform: scale(" + this.scale + "); -webkit-transform: scale(" + this.scale + "); -moz-transform: scale(" + this.scale + "); -ms-transform: scale(" + this.scale + "); transform-origin: 0 0; -webkit-transform-origin: 0 0; -moz-transform-origin: 0 0; -ms-transform-origin: 0 0;";
  };

  return MobileView;

})();

qainterface.view.ViewCollection = (function() {
  var AdConfigView, AdDataView, CompanionView, MobileView, PlayerConfigView, PlayerView, ReportingView, ResetBtnView, SubmitBtnView;

  MobileView = qainterface.view.MobileView;

  CompanionView = qainterface.view.CompanionView;

  SubmitBtnView = qainterface.view.SubmitBtnView;

  PlayerView = qainterface.view.PlayerView;

  ResetBtnView = qainterface.view.ResetBtnView;

  AdDataView = qainterface.view.AdDataView;

  ReportingView = qainterface.view.ReportingView;

  PlayerConfigView = qainterface.view.PlayerConfigView;

  AdConfigView = qainterface.view.AdConfigView;

  function ViewCollection() {
    this.adConfigView = new AdConfigView();
    this.playerConfigView = new PlayerConfigView();
    this.reportingView = new ReportingView();
    this.adDataView = new AdDataView();
    this.resetBtnView = new ResetBtnView();
    this.playerView = new PlayerView();
    this.submitBtnView = new SubmitBtnView();
    this.companionView = new CompanionView();
    this.mobileView = new MobileView();
  }

  return ViewCollection;

})();

qainterface.controller.SectionsController = (function() {
  var CoreEvent, Event, InterfaceEvent;

  Event = core.event.Event;

  Event = qainterface.event.Event;

  CoreEvent = core.event.Event;

  InterfaceEvent = qainterface.event.Event;

  function SectionsController(models, views) {
    this.models = models;
    this.views = views;
    this._onResetSelected = bind(this._onResetSelected, this);
    this._onModelChanged = bind(this._onModelChanged, this);
    this._onBtnClicked = bind(this._onBtnClicked, this);
    this.current = this.views.adConfigView;
    this.views.playerConfigView.on(InterfaceEvent.SECTION_BTN_CLICKED, this._onBtnClicked);
    this.views.adConfigView.on(InterfaceEvent.SECTION_BTN_CLICKED, this._onBtnClicked);
    this.views.reportingView.on(InterfaceEvent.SECTION_BTN_CLICKED, this._onBtnClicked);
    this.views.adDataView.on(InterfaceEvent.SECTION_BTN_CLICKED, this._onBtnClicked);
    this.views.companionView.on(InterfaceEvent.SECTION_BTN_CLICKED, this._onBtnClicked);
    this.views.resetBtnView.on(InterfaceEvent.RESET_SELECTED, this._onResetSelected);
    this.models.sectionsStateModel.on(CoreEvent.MODEL_CHANGED, this._onModelChanged);
    this.models.sectionsStateModel.setData("view-id", this.models.sectionsStateModel.data["view-id"]);
  }

  SectionsController.prototype._onBtnClicked = function(event) {
    var view;
    if (event.data.view.id === this.current.id) {
      return;
    }
    switch (event.data.view.id) {
      case this.views.playerConfigView.id:
        view = this.views.playerConfigView;
        break;
      case this.views.adConfigView.id:
        view = this.views.adConfigView;
        break;
      case this.views.reportingView.id:
        view = this.views.reportingView;
        break;
      case this.views.adDataView.id:
        view = this.views.adDataView;
        break;
      case this.views.companionView.id:
        view = this.views.companionView;
    }
    return this.models.sectionsStateModel.setData("view-id", view.id);
  };

  SectionsController.prototype._onModelChanged = function(event) {
    var id;
    id = this.models.sectionsStateModel.getData("view-id");
    this.current.hide();
    switch (id) {
      case this.views.playerConfigView.id:
        this.current = this.views.playerConfigView;
        break;
      case this.views.adConfigView.id:
        this.current = this.views.adConfigView;
        break;
      case this.views.reportingView.id:
        this.current = this.views.reportingView;
        break;
      case this.views.adDataView.id:
        this.current = this.views.adDataView;
        break;
      case this.views.companionView.id:
        this.current = this.views.companionView;
    }
    return this.current.show();
  };

  SectionsController.prototype._onResetSelected = function() {
    return this.models.sectionsStateModel.reset();
  };

  return SectionsController;

})();

qainterface.controller.AdConfigController = (function() {
  var Event;

  Event = qainterface.event.Event;

  function AdConfigController(models, views) {
    this.models = models;
    this.views = views;
    this._onSubmitSelected = bind(this._onSubmitSelected, this);
    this.view = this.views.adConfigView;
    this.model = this.models.adConfigModel;
    this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
    this.view.render(this.model.getData());
  }

  AdConfigController.prototype._onSubmitSelected = function() {
    this.model.setData("preroll", this.view.preNode.value);
    this.model.setData("midroll", this.view.midNode.value);
    this.model.setData("postroll", this.view.postNode.value);
    return this.model.setData("overlay", this.view.overNode.value);
  };

  return AdConfigController;

})();

qainterface.controller.PlayerConfigController = (function() {
  var Event;

  Event = qainterface.event.Event;

  function PlayerConfigController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    this._onSubmitSelected = bind(this._onSubmitSelected, this);
    this.view = this.views.playerConfigView;
    this.model = this.models.playerConfigModel;
    this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
    data = this.model.getData();
    this.view.render(data);
  }

  PlayerConfigController.prototype._onSubmitSelected = function() {
    this.model.setData("player-type", this.view.typeNode.options[this.view.typeNode.selectedIndex].value);
    this.model.setData("width", this.view.widthNode.value);
    this.model.setData("height", this.view.heightNode.value);
    this.model.setData("controls", this.view.controlsNode.options[this.view.controlsNode.selectedIndex].value);
    this.model.setData("auto-start", this.view.autoStartNode.options[this.view.autoStartNode.selectedIndex].value);
    this.model.setData("script-access", this.view.scriptAccessNode.options[this.view.scriptAccessNode.selectedIndex].value);
    return this.model.setData("wmode", this.view.wmodeNode.options[this.view.wmodeNode.selectedIndex].value);
  };

  return PlayerConfigController;

})();

qainterface.controller.ReportingController = (function() {
  var CoreEvent, Event, InterfaceEvent;

  Event = core.event.Event;

  Event = qainterface.event.Event;

  CoreEvent = core.event.Event;

  InterfaceEvent = qainterface.event.Event;

  function ReportingController(models, views) {
    this.models = models;
    this.views = views;
    this._updateView = bind(this._updateView, this);
    this._onPlayerLoaded = bind(this._onPlayerLoaded, this);
    this.view = this.views.reportingView;
    this.views.playerView.addEventListener(InterfaceEvent.PLAYER_LOADED, this._onPlayerLoaded);
  }

  ReportingController.prototype._onPlayerLoaded = function() {
    this.model = this.views.playerView.frame.contentWindow.baseInterface.models.reportingModel;
    this.model.addEventListener(CoreEvent.MODEL_CHANGED, this._updateView);
    return this._updateView();
  };

  ReportingController.prototype._updateView = function() {
    var data;
    data = this.model.getData();
    return this.view.render(data);
  };

  return ReportingController;

})();

qainterface.controller.AdDataController = (function() {
  var CoreEvent, Event, InterfaceEvent;

  Event = core.event.Event;

  Event = qainterface.event.Event;

  CoreEvent = core.event.Event;

  InterfaceEvent = qainterface.event.Event;

  function AdDataController(models, views) {
    this.models = models;
    this.views = views;
    this._updateView = bind(this._updateView, this);
    this._onPlayerLoaded = bind(this._onPlayerLoaded, this);
    this.view = this.views.adDataView;
    this.views.playerView.addEventListener(InterfaceEvent.PLAYER_LOADED, this._onPlayerLoaded);
  }

  AdDataController.prototype._onPlayerLoaded = function() {
    this.model = this.views.playerView.frame.contentWindow.baseInterface.models.adTagModel;
    return this.model.addEventListener(CoreEvent.MODEL_CHANGED, this._updateView);
  };

  AdDataController.prototype._updateView = function() {
    var data;
    data = this.model.getData();
    return this.view.render(data.tag);
  };

  return AdDataController;

})();

qainterface.controller.PlayerController = (function() {
  var Utils;

  Utils = core.common.Utils;

  function PlayerController(models, views) {
    var adConfig, adString, data, playerConfig, playerString;
    this.models = models;
    this.views = views;
    adConfig = this.models.adConfigModel.getData();
    playerConfig = this.models.playerConfigModel.getData();
    adString = Utils.searchify(adConfig);
    playerString = Utils.searchify(playerConfig);
    data = {
      config: playerConfig,
      search: adString + "&" + playerString
    };
    this.views.playerView.render(data);
  }

  return PlayerController;

})();

qainterface.controller.AdHistoryController = (function() {
  var Event;

  Event = qainterface.event.Event;

  function AdHistoryController(models, views) {
    this.models = models;
    this.views = views;
    this._onResetSelected = bind(this._onResetSelected, this);
    this._onSubmitSelected = bind(this._onSubmitSelected, this);
    this.model = this.models.adHistoryModel;
    this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
    this.views.resetBtnView.addEventListener(Event.RESET_SELECTED, this._onResetSelected);
  }

  AdHistoryController.prototype._onSubmitSelected = function() {
    var data, j, key, len, results1, value;
    data = this.models.adConfigModel.getData();
    results1 = [];
    for (j = 0, len = data.length; j < len; j++) {
      key = data[j];
      value = data[key];
      if (value.length > 0) {
        key += "-history";
        results1.push(this.model.setData(key, value));
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  AdHistoryController.prototype._onResetSelected = function() {
    return this.model.reset();
  };

  return AdHistoryController;

})();

qainterface.controller.CompanionController = (function() {
  var CoreEvent, Event, InterfaceEvent;

  Event = core.event.Event;

  Event = qainterface.event.Event;

  CoreEvent = core.event.Event;

  InterfaceEvent = qainterface.event.Event;

  function CompanionController(models, views) {
    this.models = models;
    this.views = views;
    this._updateView = bind(this._updateView, this);
    this._onPlayerLoaded = bind(this._onPlayerLoaded, this);
    this.view = this.views.companionView;
    this.views.playerView.addEventListener(InterfaceEvent.PLAYER_LOADED, this._onPlayerLoaded);
  }

  CompanionController.prototype._onPlayerLoaded = function() {
    this.model = this.views.playerView.frame.contentWindow.baseInterface.models.companionModel;
    return this.model.addEventListener(CoreEvent.MODEL_CHANGED, this._updateView);
  };

  CompanionController.prototype._updateView = function() {
    var data;
    data = this.model.getData();
    return this.view.render(data);
  };

  return CompanionController;

})();

qainterface.controller.LocationController = (function() {
  var Event, Utils;

  Utils = core.common.Utils;

  Event = qainterface.event.Event;

  function LocationController(models, views) {
    this.models = models;
    this.views = views;
    this._onResetSelected = bind(this._onResetSelected, this);
    this._onSubmitSelected = bind(this._onSubmitSelected, this);
    this.views.submitBtnView.addEventListener(Event.SUBMIT_SELECTED, this._onSubmitSelected);
    this.views.resetBtnView.addEventListener(Event.RESET_SELECTED, this._onResetSelected);
  }

  LocationController.prototype._onSubmitSelected = function() {
    var adConfig, adString, playerConfig, playerString;
    adConfig = this.models.adConfigModel.getData();
    playerConfig = this.models.playerConfigModel.getData();
    adString = Utils.searchify(adConfig);
    playerString = Utils.searchify(playerConfig);
    return window.location.search = adString + "&" + playerString;
  };

  LocationController.prototype._onResetSelected = function() {
    return window.location.search = "";
  };

  return LocationController;

})();

qainterface.controller.MobileController = (function() {
  function MobileController(models, views) {
    var data;
    this.models = models;
    this.views = views;
    data = this.models.playerConfigModel.getData();
    this.views.mobileView.render(data);
  }

  return MobileController;

})();

qainterface.controller.ControllerCollection = (function() {
  var AdConfigController, AdDataController, AdHistoryController, CompanionController, LocationController, MobileController, PlayerConfigController, PlayerController, ReportingController, SectionsController;

  MobileController = qainterface.controller.MobileController;

  LocationController = qainterface.controller.LocationController;

  CompanionController = qainterface.controller.CompanionController;

  AdHistoryController = qainterface.controller.AdHistoryController;

  PlayerController = qainterface.controller.PlayerController;

  AdDataController = qainterface.controller.AdDataController;

  ReportingController = qainterface.controller.ReportingController;

  PlayerConfigController = qainterface.controller.PlayerConfigController;

  AdConfigController = qainterface.controller.AdConfigController;

  SectionsController = qainterface.controller.SectionsController;

  function ControllerCollection(models, views) {
    this.models = models;
    this.views = views;
    this.sectionsController = new SectionsController(this.models, this.views);
    this.adConfigController = new AdConfigController(this.models, this.views);
    this.playerConfigController = new PlayerConfigController(this.models, this.views);
    this.reportingController = new ReportingController(this.models, this.views);
    this.adDataController = new AdDataController(this.models, this.views);
    this.playerController = new PlayerController(this.models, this.views);
    this.adHistoryController = new AdHistoryController(this.models, this.views);
    this.companionController = new CompanionController(this.models, this.views);
    this.locationController = new LocationController(this.models, this.views);
    this.mobileController = new MobileController(this.models, this.views);
  }

  return ControllerCollection;

})();

qainterface.QaInterface = (function() {
  var ControllerCollection, ModelCollection, Utils, ViewCollection;

  Utils = core.common.Utils;

  ControllerCollection = qainterface.controller.ControllerCollection;

  ViewCollection = qainterface.view.ViewCollection;

  ModelCollection = qainterface.model.ModelCollection;

  function QaInterface() {
    this._onWindowLoaded = bind(this._onWindowLoaded, this);
    window.qaInterface = this;
    Utils.on(window, "load", this._onWindowLoaded);
  }

  QaInterface.prototype._onWindowLoaded = function() {
    this.models = new ModelCollection();
    this.views = new ViewCollection();
    return this.controllers = new ControllerCollection(this.models, this.views);
  };

  return QaInterface;

})();

qaInterface = new qainterface.QaInterface();
